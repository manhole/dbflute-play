2014-03-22 15:46:53,418 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2014-03-22 15:46:53,420 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2014-03-22 15:46:53,420 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2014-03-22 15:46:53,440 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2014-03-22 15:46:53,441 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2014-03-22 15:46:53,443 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2014-03-22 15:46:53,465 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:46:53,465 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:46:53,466 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:46:53,466 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:46:53,472 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:46:53,774 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:46:53,774 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:46:53,786 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2014-03-22 15:46:53,786 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2014-03-22 15:46:53,787 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2014-03-22 15:46:53,787 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2014-03-22 15:46:53,788 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2014-03-22 15:46:53,788 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2014-03-22 15:46:53,798 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:46:53,799 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:53,799 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:46:53,815 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2014-03-22 15:46:53,820 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2014-03-22 15:46:53,821 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2014-03-22 15:46:53,821 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2014-03-22 15:46:53,822 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2014-03-22 15:46:53,822 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2014-03-22 15:46:53,826 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2014-03-22 15:46:53,833 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_NAME VARCHAR(200) NOT NULL,
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL,
    MEMBER_STATUS_CODE CHAR(3) NOT NULL,
    FORMALIZED_DATETIME DATETIME,
    BIRTHDATE DATE,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,838 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    VALID_BEGIN_DATE DATE NOT NULL,
    VALID_END_DATE DATE NOT NULL,
    ADDRESS VARCHAR(200) NOT NULL,
    REGION_ID INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,841 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    LOGIN_DATETIME DATETIME NOT NULL,
    MOBILE_LOGIN_FLG INTEGER NOT NULL,
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL
)
2014-03-22 15:46:53,844 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    LOGIN_PASSWORD VARCHAR(50) NOT NULL,
    REMINDER_QUESTION VARCHAR(50) NOT NULL,
    REMINDER_ANSWER VARCHAR(50) NOT NULL,
    REMINDER_USE_COUNT INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,847 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_SERVICE_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    SERVICE_POINT_COUNT INTEGER NOT NULL,
    SERVICE_RANK_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,850 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_CODE CHAR(3),
    WITHDRAWAL_REASON_INPUT_TEXT TEXT,
    WITHDRAWAL_DATETIME DATETIME NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    PURCHASE_DATETIME DATETIME NOT NULL,
    PURCHASE_COUNT INTEGER NOT NULL,
    PURCHASE_PRICE INTEGER NOT NULL,
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,857 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL,
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:46:53,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL,
    PARENT_CATEGORY_CODE CHAR(3)
)
2014-03-22 15:46:53,862 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:46:53,864 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL PRIMARY KEY,
    REGION_NAME VARCHAR(50) NOT NULL
)
2014-03-22 15:46:53,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL PRIMARY KEY,
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL,
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL,
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:46:53,867 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:46:53,869 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:46:53,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:46:53,877 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,881 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) references REGION (REGION_ID)
2014-03-22 15:46:53,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:46:53,887 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,889 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,891 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2014-03-22 15:46:53,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,895 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,898 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2014-03-22 15:46:53,902 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:46:53,905 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2014-03-22 15:46:53,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:46:53,911 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2014-03-22 15:46:53,914 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:46:53,917 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER add constraint UQ_MEMBER_MEMBER_ACCOUNT UNIQUE (MEMBER_ACCOUNT)
2014-03-22 15:46:53,918 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_ADDRESS add constraint UQ_MEMBER_ADDRESS UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
2014-03-22 15:46:53,919 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_LOGIN add constraint UQ_MEMBER_LOGIN UNIQUE (MEMBER_ID, LOGIN_DATETIME)
2014-03-22 15:46:53,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE UNIQUE (MEMBER_ID)
2014-03-22 15:46:53,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PURCHASE add constraint UQ_PURCHASE UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:46:53,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT add constraint UQ_PRODUCT_PRODUCT_HANDLE_CODE UNIQUE (PRODUCT_HANDLE_CODE)
2014-03-22 15:46:53,924 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_STATUS add constraint UQ_MEMBER_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:46:53,926 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint UQ_PRODUCT_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:46:53,927 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table SERVICE_RANK add constraint UQ_SERVICE_RANK_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:46:53,929 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table WITHDRAWAL_REASON add constraint UQ_WITHDRAWAL_REASON_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:46:53,930 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2014-03-22 15:46:53,931 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2014-03-22 15:46:53,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2014-03-22 15:46:53,933 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2014-03-22 15:46:53,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:46:53,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2014-03-22 15:46:53,937 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2014-03-22 15:46:53,937 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2014-03-22 15:46:53,938 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=47 failure=0
2014-03-22 15:46:53,939 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-20-view.sql
2014-03-22 15:46:53,940 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is defined at DBFlute property
create view SUMMARY_PRODUCT as
select product.PRODUCT_ID
     , product.PRODUCT_NAME
     , product.PRODUCT_HANDLE_CODE
     , product.PRODUCT_STATUS_CODE
     , (select max(purchase.PURCHASE_DATETIME)
          from PURCHASE purchase
         where purchase.PRODUCT_ID = product.PRODUCT_ID
       ) as LATEST_PURCHASE_DATETIME
  from PRODUCT product
2014-03-22 15:46:53,943 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is NOT defined at DBFlute property
-- treated as no-primary-key table 
create view SUMMARY_WITHDRAWAL as
select withdrawal.MEMBER_ID
     , member.MEMBER_NAME
     , withdrawal.WITHDRAWAL_REASON_CODE
     , reason.WITHDRAWAL_REASON_TEXT
     , withdrawal.WITHDRAWAL_REASON_INPUT_TEXT
     , withdrawal.WITHDRAWAL_DATETIME
     , member.MEMBER_STATUS_CODE
     , status.MEMBER_STATUS_NAME
     , (select max(purchase.PURCHASE_PRICE)
          from PURCHASE purchase
         where purchase.MEMBER_ID = member.MEMBER_ID
       ) as MAX_PURCHASE_PRICE
  from MEMBER_WITHDRAWAL withdrawal
    left outer join WITHDRAWAL_REASON reason
      on withdrawal.WITHDRAWAL_REASON_CODE = reason.WITHDRAWAL_REASON_CODE
    left outer join MEMBER member
      on withdrawal.MEMBER_ID = member.MEMBER_ID
    left outer join MEMBER_STATUS status
      on member.MEMBER_STATUS_CODE = status.MEMBER_STATUS_CODE
2014-03-22 15:46:53,948 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2014-03-22 15:46:53,948 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-80-comment.sql
2014-03-22 15:46:53,952 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER
comment on table MEMBER is '会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。'
2014-03-22 15:46:53,954 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ID is '会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。'
2014-03-22 15:46:53,955 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_NAME is '会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。'
2014-03-22 15:46:53,957 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ACCOUNT is '会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。'
2014-03-22 15:46:53,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。'
2014-03-22 15:46:53,961 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.FORMALIZED_DATETIME is '正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。'
2014-03-22 15:46:53,962 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER.BIRTHDATE is '生年月日: 必須項目ではないので、このデータがない会員もいる。'
2014-03-22 15:46:53,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_DATETIME is '登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。'
2014-03-22 15:46:53,965 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_USER is '登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。'
2014-03-22 15:46:53,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_DATETIME is '更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。'
2014-03-22 15:46:53,970 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_USER is '更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。'
2014-03-22 15:46:53,972 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.VERSION_NO is 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。'
2014-03-22 15:46:53,978 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_ADDRESS
comment on table MEMBER_ADDRESS is '会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。'
2014-03-22 15:46:53,980 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ADDRESS_ID is '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。'
2014-03-22 15:46:53,981 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ID is '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。'
2014-03-22 15:46:53,983 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_BEGIN_DATE is '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。'
2014-03-22 15:46:53,985 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_END_DATE is '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。'
2014-03-22 15:46:53,986 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_ADDRESS.ADDRESS is '住所: まるごと住所'
2014-03-22 15:46:53,987 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.REGION_ID is '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）'
2014-03-22 15:46:53,989 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SECURITY
comment on table MEMBER_SECURITY is '会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2014-03-22 15:46:53,990 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.MEMBER_ID is '会員ID: そのまま one-to-one を構成するためのFKとなる。'
2014-03-22 15:46:53,991 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.LOGIN_PASSWORD is 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。'
2014-03-22 15:46:53,992 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_QUESTION is 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。'
2014-03-22 15:46:53,993 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_ANSWER is 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。'
2014-03-22 15:46:53,994 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.REMINDER_USE_COUNT is 'リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。'
2014-03-22 15:46:53,995 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SERVICE
comment on table MEMBER_SERVICE is '会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。'
2014-03-22 15:46:53,996 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_SERVICE_ID is '会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。'
2014-03-22 15:46:53,997 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_ID is '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。'
2014-03-22 15:46:53,999 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_POINT_COUNT is 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。'
2014-03-22 15:46:54,000 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。'
2014-03-22 15:46:54,001 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_WITHDRAWAL
comment on table MEMBER_WITHDRAWAL is '会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。'
2014-03-22 15:46:54,002 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_CODE is '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。'
2014-03-22 15:46:54,003 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_INPUT_TEXT is '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。'
2014-03-22 15:46:54,004 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_DATETIME is '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。'
2014-03-22 15:46:54,006 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_LOGIN
comment on table MEMBER_LOGIN is '会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。'
2014-03-22 15:46:54,007 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_LOGIN_ID is '会員ログインID: '
2014-03-22 15:46:54,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_ID is '会員ID: '
2014-03-22 15:46:54,009 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_DATETIME is 'ログイン日時: ログインした瞬間の日時。'
2014-03-22 15:46:54,009 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MOBILE_LOGIN_FLG is 'モバイルログインフラグ: モバイル機器からのログインか否か。'
2014-03-22 15:46:54,010 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_MEMBER_STATUS_CODE is 'ログイン会員ステータスコード: ログイン時の会員ステータス'
2014-03-22 15:46:54,011 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PURCHASE
comment on table PURCHASE is '購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。'
2014-03-22 15:46:54,013 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.MEMBER_ID is '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。'
2014-03-22 15:46:54,014 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PRODUCT_ID is '商品ID: 商品を参照するID。'
2014-03-22 15:46:54,016 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_DATETIME is '購入日時: 購入した瞬間の日時。'
2014-03-22 15:46:54,017 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_COUNT is '購入数量: 購入した商品の（一回の購入における）数量。'
2014-03-22 15:46:54,018 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.PURCHASE_PRICE is '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。'
2014-03-22 15:46:54,020 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PAYMENT_COMPLETE_FLG is '支払完了フラグ: この購入に関しての支払いが完了しているか否か。'
2014-03-22 15:46:54,021 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT
comment on table PRODUCT is '商品: '
2014-03-22 15:46:54,022 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PRODUCT.PRODUCT_NAME is '商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。'
2014-03-22 15:46:54,024 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT.PRODUCT_HANDLE_CODE is '商品ハンドルコード: 商品を識別する業務上のコード。'
2014-03-22 15:46:54,025 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_STATUS
comment on table MEMBER_STATUS is '会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。'
2014-03-22 15:46:54,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
'
2014-03-22 15:46:54,027 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_STATUS.MEMBER_STATUS_NAME is '会員ステータス名称: '
2014-03-22 15:46:54,028 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DESCRIPTION is '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。'
2014-03-22 15:46:54,029 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DISPLAY_ORDER is '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。'
2014-03-22 15:46:54,030 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- SERVICE_RANK
comment on table SERVICE_RANK is 'サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2014-03-22 15:46:54,031 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを識別するコード。'
2014-03-22 15:46:54,032 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_RANK_NAME is 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）'
2014-03-22 15:46:54,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_POINT_INCIDENCE is 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。'
2014-03-22 15:46:54,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.NEW_ACCEPTABLE_FLG is '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。'
2014-03-22 15:46:54,034 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DESCRIPTION is '説明: ランクに関する業務的な説明。'
2014-03-22 15:46:54,035 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DISPLAY_ORDER is '表示順: UI上の表示順を表現する番号。'
2014-03-22 15:46:54,036 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_CATEGORY
comment on table PRODUCT_CATEGORY is '商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2014-03-22 15:46:54,037 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_CODE is '商品カテゴリコード: '
2014-03-22 15:46:54,037 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_NAME is '商品カテゴリ名称: '
2014-03-22 15:46:54,038 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PARENT_CATEGORY_CODE is '親カテゴリコード: 最上位の場合はデータなし。'
2014-03-22 15:46:54,039 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_STATUS
comment on table PRODUCT_STATUS is '商品ステータス: 商品のステータスを表現する固定的なマスタ。'
2014-03-22 15:46:54,040 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_STATUS.PRODUCT_STATUS_CODE is '商品ステータスコード: 商品ステータスを識別するコード。'
2014-03-22 15:46:54,040 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- REGION
comment on table REGION is '地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。'
2014-03-22 15:46:54,041 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column REGION.REGION_ID is '地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。'
2014-03-22 15:46:54,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column REGION.REGION_NAME is '地域名称: 地域を表す名称。'
2014-03-22 15:46:54,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- WITHDRAWAL_REASON
comment on table WITHDRAWAL_REASON is '退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2014-03-22 15:46:54,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_CODE is '退会理由コード: '
2014-03-22 15:46:54,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_TEXT is '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。'
2014-03-22 15:46:54,044 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=74 failure=0
2014-03-22 15:46:54,045 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=123 failure=0 (in 3 files)
2014-03-22 15:46:54,074 [main] INFO  (DfLoadDataProcess#execute():129) - 
2014-03-22 15:46:54,074 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2014-03-22 15:46:54,075 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2014-03-22 15:46:54,075 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2014-03-22 15:46:54,075 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2014-03-22 15:46:54,076 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2014-03-22 15:46:54,104 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:46:54,105 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/common/xls/10-master.xls)
2014-03-22 15:46:54,105 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:46:54,329 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:46:54,329 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:54,329 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:46:54,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2014-03-22 15:46:54,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2014-03-22 15:46:54,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2014-03-22 15:46:54,395 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to MEMBER_STATUS
2014-03-22 15:46:54,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{1, アメリカ}
2014-03-22 15:46:54,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{2, カナダ}
2014-03-22 15:46:54,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{3, 中国}
2014-03-22 15:46:54,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{4, 千葉}
2014-03-22 15:46:54,405 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to REGION
2014-03-22 15:46:54,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2014-03-22 15:46:54,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2014-03-22 15:46:54,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2014-03-22 15:46:54,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2014-03-22 15:46:54,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2014-03-22 15:46:54,411 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to SERVICE_RANK
2014-03-22 15:46:54,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2014-03-22 15:46:54,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2014-03-22 15:46:54,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2014-03-22 15:46:54,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2014-03-22 15:46:54,426 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2014-03-22 15:46:54,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2014-03-22 15:46:54,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{FOD, 食品, null}
2014-03-22 15:46:54,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2014-03-22 15:46:54,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2014-03-22 15:46:54,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2014-03-22 15:46:54,431 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2014-03-22 15:46:54,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2014-03-22 15:46:54,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{PST, 生産中止, 2}
2014-03-22 15:46:54,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{SST, 販売中止, 3}
2014-03-22 15:46:54,440 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to PRODUCT_STATUS
2014-03-22 15:46:54,442 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:46:54,443 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/ut/reversexls/cyclic-data-01-MEMBER-plus.xls)
2014-03-22 15:46:54,443 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:46:54,604 [main] INFO  (DfLoadingControlProp#analyzeLoadingControlMap():470) - ...Analyzing loadingControlMap:
2014-03-22 15:46:54,606 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():549) - map:{
2014-03-22 15:46:54,607 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     loggingInsertType = PART
2014-03-22 15:46:54,607 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressBatchUpdate = false
2014-03-22 15:46:54,608 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressColumnDefCheck = false
2014-03-22 15:46:54,608 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():552) -     dateAdjustmentMap = map:{
2014-03-22 15:46:54,608 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceYears = 1
2014-03-22 15:46:54,609 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceMonths = 11
2014-03-22 15:46:54,609 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceDays = 339
2014-03-22 15:46:54,610 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:originDate = 2013/04/17
2014-03-22 15:46:54,610 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         $$ALL$$ = {$$ALL$$=addDay($distance), FORMALIZED_DATETIME=addDay(0), LOGIN_DATETIME=addDay(0)}
2014-03-22 15:46:54,610 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER = {BIRTHDATE=addDay(0)}
2014-03-22 15:46:54,611 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER_ADDRESS = {$$ALL$$=addDay(0)}
2014-03-22 15:46:54,611 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         WHITE_XLS_MAN = {$$ALL$$=addDay(0)}
2014-03-22 15:46:54,612 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():559) -     }
2014-03-22 15:46:54,612 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():565) - }
2014-03-22 15:46:54,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10.000, 1965/03/03 00:00:00.000, 2013/12/28 13:43:53.816, foo, 2013/12/28 13:43:53.816, foo, 0}
2014-03-22 15:46:54,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15 00:00:00.000, 2013/12/28 13:43:53.823, foo, 2013/12/28 13:43:53.823, foo, 0}
2014-03-22 15:46:54,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30.000, null, 2013/12/28 13:43:53.825, foo, 2013/12/28 13:43:53.825, foo, 0}
2014-03-22 15:46:54,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40.000, 1978/09/11 00:00:00.000, 2013/12/28 13:43:53.828, foo, 2013/12/28 13:43:53.828, foo, 0}
2014-03-22 15:46:54,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50.000, null, 2013/12/28 13:43:53.830, foo, 2013/12/28 13:43:53.830, foo, 0}
2014-03-22 15:46:54,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40.000, 1969/02/20 00:00:00.000, 2013/12/28 13:43:53.832, foo, 2013/12/28 13:43:53.832, foo, 0}
2014-03-22 15:46:54,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30.000, null, 2013/12/28 13:43:53.836, foo, 2013/12/28 13:43:53.836, foo, 0}
2014-03-22 15:46:54,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20.000, null, 2013/12/28 13:43:53.838, foo, 2013/12/28 13:43:53.838, foo, 0}
2014-03-22 15:46:54,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00.000, 1967/02/20 00:00:00.000, 2013/12/28 13:43:53.841, foo, 2013/12/28 13:43:53.841, foo, 0}
2014-03-22 15:46:54,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2013/12/28 13:43:53.844, foo, 2013/12/28 13:43:53.844, foo, 0}
2014-03-22 15:46:54,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER:{... more several records}
2014-03-22 15:46:54,733 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER
2014-03-22 15:46:54,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{1, 1, 2007/03/24 00:00:00.000, 2015/12/31 00:00:00.000, Nagara, 4, 2013/01/23 13:43:53.954, foo, 2013/01/23 13:43:53.954, foo, 0}
2014-03-22 15:46:54,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{2, 1, 1949/01/01 00:00:00.000, 1997/03/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.958, foo, 2013/01/23 13:43:53.958, foo, 0}
2014-03-22 15:46:54,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{3, 1, 1997/04/01 00:00:00.000, 2000/09/30 00:00:00.000, Los Angels, 1, 2013/01/23 13:43:53.960, foo, 2013/01/23 13:43:53.960, foo, 0}
2014-03-22 15:46:54,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{4, 1, 2000/10/01 00:00:00.000, 2003/08/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.963, foo, 2013/01/23 13:43:53.963, foo, 0}
2014-03-22 15:46:54,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{5, 1, 2003/09/01 00:00:00.000, 2004/12/22 00:00:00.000, San Francisco Powell, 1, 2013/01/23 13:43:53.965, foo, 2013/01/23 13:43:53.965, foo, 0}
2014-03-22 15:46:54,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{6, 1, 2004/12/23 00:00:00.000, 2006/03/23 00:00:00.000, San Francisco Daly City, 1, 2013/01/23 13:43:53.968, foo, 2013/01/23 13:43:53.968, foo, 0}
2014-03-22 15:46:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{7, 1, 2016/01/01 00:00:00.000, 9999/12/31 00:00:00.000, Victoria, 2, 2013/01/23 13:43:53.970, foo, 2013/01/23 13:43:53.970, foo, 0}
2014-03-22 15:46:54,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{8, 2, 2004/12/24 00:00:00.000, 9999/12/31 00:00:00.000, Ichihara, 4, 2013/01/23 13:43:53.973, foo, 2013/01/23 13:43:53.973, foo, 0}
2014-03-22 15:46:54,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{9, 3, 2004/12/24 00:00:00.000, 2007/03/23 00:00:00.000, Mobara, 4, 2013/01/23 13:43:53.975, foo, 2013/01/23 13:43:53.975, foo, 0}
2014-03-22 15:46:54,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{10, 4, 2002/11/01 00:00:00.000, 9999/12/31 00:00:00.000, Sousa, 4, 2013/01/23 13:43:53.977, foo, 2013/01/23 13:43:53.977, foo, 0}
2014-03-22 15:46:54,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_ADDRESS:{... more several records}
2014-03-22 15:46:54,829 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_ADDRESS
2014-03-22 15:46:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59.000, 0, FML}
2014-03-22 15:46:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16.000, 0, FML}
2014-03-22 15:46:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29.000, 0, FML}
2014-03-22 15:46:54,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00.000, 0, FML}
2014-03-22 15:46:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59.000, 0, FML}
2014-03-22 15:46:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01.000, 0, PRV}
2014-03-22 15:46:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59.000, 1, FML}
2014-03-22 15:46:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00.000, 0, FML}
2014-03-22 15:46:54,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59.000, 0, FML}
2014-03-22 15:46:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00.000, 0, FML}
2014-03-22 15:46:54,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_LOGIN:{... more several records}
2014-03-22 15:46:54,900 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 56 rows are loaded to MEMBER_LOGIN
2014-03-22 15:46:54,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 0, 2013/12/28 13:43:54.206, foo, 2013/12/28 13:43:54.206, foo, 0}
2014-03-22 15:46:54,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2013/12/28 13:43:54.208, foo, 2013/12/28 13:43:54.208, foo, 0}
2014-03-22 15:46:54,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2013/12/28 13:43:54.209, foo, 2013/12/28 13:43:54.209, foo, 0}
2014-03-22 15:46:54,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 12, 2013/12/28 13:43:54.211, foo, 2013/12/28 13:43:54.211, foo, 0}
2014-03-22 15:46:54,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 410, 2013/12/28 13:43:54.212, foo, 2013/12/28 13:43:54.212, foo, 0}
2014-03-22 15:46:54,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2, 2013/12/28 13:43:54.213, foo, 2013/12/28 13:43:54.213, foo, 0}
2014-03-22 15:46:54,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 4, 2013/12/28 13:43:54.214, foo, 2013/12/28 13:43:54.214, foo, 0}
2014-03-22 15:46:54,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 9, 2013/12/28 13:43:54.215, foo, 2013/12/28 13:43:54.215, foo, 0}
2014-03-22 15:46:54,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 25, 2013/12/28 13:43:54.216, foo, 2013/12/28 13:43:54.216, foo, 0}
2014-03-22 15:46:54,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 8, 2013/12/28 13:43:54.217, foo, 2013/12/28 13:43:54.217, foo, 0}
2014-03-22 15:46:54,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SECURITY:{... more several records}
2014-03-22 15:46:54,934 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SECURITY
2014-03-22 15:46:54,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2013/12/28 13:43:54.233, foo, 2013/12/28 13:43:54.233, foo, 0}
2014-03-22 15:46:54,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2013/12/28 13:43:54.234, foo, 2013/12/28 13:43:54.234, foo, 0}
2014-03-22 15:46:54,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2013/12/28 13:43:54.235, foo, 2013/12/28 13:43:54.235, foo, 0}
2014-03-22 15:46:54,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2013/12/28 13:43:54.236, foo, 2013/12/28 13:43:54.236, foo, 0}
2014-03-22 15:46:54,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2013/12/28 13:43:54.237, foo, 2013/12/28 13:43:54.238, foo, 0}
2014-03-22 15:46:54,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2013/12/28 13:43:54.239, foo, 2013/12/28 13:43:54.239, foo, 0}
2014-03-22 15:46:54,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2013/12/28 13:43:54.240, foo, 2013/12/28 13:43:54.240, foo, 0}
2014-03-22 15:46:54,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{8, 8, 234, SIL, 2013/12/28 13:43:54.241, foo, 2013/12/28 13:43:54.241, foo, 0}
2014-03-22 15:46:54,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{9, 9, 3, SIL, 2013/12/28 13:43:54.243, foo, 2013/12/28 13:43:54.243, foo, 0}
2014-03-22 15:46:54,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2013/12/28 13:43:54.244, foo, 2013/12/28 13:43:54.244, foo, 0}
2014-03-22 15:46:54,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SERVICE:{... more several records}
2014-03-22 15:46:54,998 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SERVICE
2014-03-22 15:46:55,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2007/11/28 23:59:59.123, 2013/12/28 13:43:54.269, foo, 2013/12/28 13:43:54.269, foo, 0}
2014-03-22 15:46:55,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{6, SIT, null, 2008/10/15 16:00:00.456, 2013/12/28 13:43:54.271, foo, 2013/12/28 13:43:54.271, foo, 0}
2014-03-22 15:46:55,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2007/11/28 05:52:29.789, 2013/12/28 13:43:54.273, foo, 2013/12/28 13:43:54.273, foo, 0}
2014-03-22 15:46:55,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2008/10/17 16:00:00.456, 2013/12/28 13:43:54.275, foo, 2013/12/28 13:43:54.275, foo, 0}
2014-03-22 15:46:55,006 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2014-03-22 15:46:55,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2013/12/28 13:43:54.363, foo, 2013/12/28 13:43:54.363, foo, 0}
2014-03-22 15:46:55,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2013/12/28 13:43:54.365, foo, 2013/12/28 13:43:54.365, foo, 0}
2014-03-22 15:46:55,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2013/12/28 13:43:54.366, foo, 2013/12/28 13:43:54.366, foo, 0}
2014-03-22 15:46:55,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2013/12/28 13:43:54.368, foo, 2013/12/28 13:43:54.368, foo, 0}
2014-03-22 15:46:55,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2013/12/28 13:43:54.369, foo, 2013/12/28 13:43:54.369, foo, 0}
2014-03-22 15:46:55,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2013/12/28 13:43:54.370, foo, 2013/12/28 13:43:54.370, foo, 0}
2014-03-22 15:46:55,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2013/12/28 13:43:54.371, foo, 2013/12/28 13:43:54.371, foo, 0}
2014-03-22 15:46:55,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2013/12/28 13:43:54.372, foo, 2013/12/28 13:43:54.372, foo, 0}
2014-03-22 15:46:55,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2013/12/28 13:43:54.374, foo, 2013/12/28 13:43:54.374, foo, 0}
2014-03-22 15:46:55,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2013/12/28 13:43:54.375, foo, 2013/12/28 13:43:54.375, foo, 0}
2014-03-22 15:46:55,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PRODUCT:{... more several records}
2014-03-22 15:46:55,039 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to PRODUCT
2014-03-22 15:46:55,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{1, 5, 3, 2007/11/28 23:59:59.000, 1, 1800, 1, 2013/12/28 13:43:54.401, foo, 2013/12/28 13:43:54.401, foo, 0}
2014-03-22 15:46:55,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{2, 15, 7, 2008/10/15 16:16:16.000, 1, 1700, 1, 2013/12/28 13:43:54.408, foo, 2013/12/28 13:43:54.408, foo, 0}
2014-03-22 15:46:55,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{3, 13, 3, 2007/11/27 22:56:29.235, 1, 1800, 1, 2013/12/28 13:43:54.410, foo, 2013/12/28 13:43:54.410, foo, 0}
2014-03-22 15:46:55,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{4, 2, 5, 2008/10/05 02:13:00.000, 2, 1700, 1, 2013/12/28 13:43:54.411, foo, 2013/12/28 13:43:54.411, foo, 0}
2014-03-22 15:46:55,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{5, 9, 11, 2008/12/08 23:12:59.000, 5, 1800, 1, 2013/12/28 13:43:54.413, foo, 2013/12/28 13:43:54.413, foo, 0}
2014-03-22 15:46:55,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{6, 20, 2, 2002/12/06 16:32:01.000, 1, 2000, 1, 2013/12/28 13:43:54.415, foo, 2013/12/28 13:43:54.415, foo, 0}
2014-03-22 15:46:55,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{7, 19, 9, 2007/01/02 23:59:59.999, 1, 1000, 0, 2013/12/28 13:43:54.417, foo, 2013/12/28 13:43:54.417, foo, 0}
2014-03-22 15:46:55,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{8, 4, 7, 2008/10/13 16:23:00.000, 1, 1535, 1, 2013/12/28 13:43:54.418, foo, 2013/12/28 13:43:54.418, foo, 0}
2014-03-22 15:46:55,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{9, 4, 10, 2007/11/26 23:59:59.000, 20, 1700, 1, 2013/12/28 13:43:54.420, foo, 2013/12/28 13:43:54.420, foo, 0}
2014-03-22 15:46:55,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{10, 2, 10, 2008/10/05 02:13:00.345, 1, 1700, 0, 2013/12/28 13:43:54.422, foo, 2013/12/28 13:43:54.422, foo, 0}
2014-03-22 15:46:55,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PURCHASE:{... more several records}
2014-03-22 15:46:55,160 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 60 rows are loaded to PURCHASE
2014-03-22 15:46:55,161 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2014-03-22 15:46:55,173 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:55,174 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:46:55,177 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:46:55,178 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:46:55,179 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:46:55,180 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:46:55,182 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:46:55,186 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:46:55,187 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:46:55,188 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2014-03-22 15:46:55,189 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2014-03-22 15:46:55,192 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2014-03-22 15:46:55,192 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2014-03-22 15:46:55,193 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2014-03-22 15:46:55,193 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2014-03-22 15:46:55,193 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2014-03-22 15:46:55,198 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2014-03-22 15:46:55,204 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2014-03-22 15:46:55,205 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     Business Constraint
--                                                                     ===================
-- #df:assertCountZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Formalized members should have their own formalized date-times.
-- - - - - - - - - - -/
select count(*)
  from MEMBER
 where MEMBER_STATUS_CODE = 'FML'
   and FORMALIZED_DATETIME is null
2014-03-22 15:46:55,209 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Withdrawal members should have their own withdrawal informations.
-- - - - - - - - - - -/
select member.MEMBER_ID, member.MEMBER_NAME
  from MEMBER member
 where member.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select withdrawal.MEMBER_ID
                     from MEMBER_WITHDRAWAL withdrawal
                    where withdrawal.MEMBER_ID = member.MEMBER_ID
       )
2014-03-22 15:46:55,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  and subadr.VALID_BEGIN_DATE < adr.VALID_END_DATE
       )
2014-03-22 15:46:55,214 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     TestData Constraint
--                                                                     ===================
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- These tables should have at least one record at ut and should not have at real.
-- - - - - - - - - - -/
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER member
2014-03-22 15:46:55,216 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=20
2014-03-22 15:46:55,216 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER_LOGIN login
2014-03-22 15:46:55,217 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=56
2014-03-22 15:46:55,217 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=5 failure=0
2014-03-22 15:46:55,218 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=5 failure=0 (in 1 files)
2014-03-22 15:46:55,219 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:46:55,296 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s877ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example

 {Create Schema}: success=123 failure=0 (in 3 files)
  o replace-schema-10-basic.sql
  o replace-schema-20-view.sql
  o replace-schema-80-comment.sql

 {Load Data}: loaded-files=2
  (common)
  o 10-master.xls
  (ut)
  o cyclic-data-01-MEMBER-plus.xls

 {Take Finally}: success=5 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2014-03-22 15:46:55,808 [main] INFO  (TorqueJDBCTransformTask#begin():100) - +------------------------------------------+
2014-03-22 15:46:55,811 [main] INFO  (TorqueJDBCTransformTask#begin():101) - |                                          |
2014-03-22 15:46:55,811 [main] INFO  (TorqueJDBCTransformTask#begin():102) - |                   JDBC                   |
2014-03-22 15:46:55,811 [main] INFO  (TorqueJDBCTransformTask#begin():103) - |                                          |
2014-03-22 15:46:55,812 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2014-03-22 15:46:55,847 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:46:55,847 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:46:55,848 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:46:55,848 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:46:55,892 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - 
2014-03-22 15:46:55,893 [main] INFO  (DfSchemaXmlSerializer#serialize():287) - ...Starting to process JDBC to SchemaXML
2014-03-22 15:46:55,893 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1463) - ...Loading previous schema (schema diff process)
2014-03-22 15:46:55,902 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:46:55,984 [main] INFO  (DfSchemaXmlSerializer#generateXML():361) - ...Getting DB connection
2014-03-22 15:46:55,986 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:46:56,337 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:46:56,337 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:46:56,338 [main] INFO  (DfSchemaXmlSerializer#generateXML():364) - ...Getting DB meta data
2014-03-22 15:46:56,339 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:46:56,340 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:56,340 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:46:56,363 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - 
2014-03-22 15:46:56,364 [main] INFO  (DfSchemaXmlSerializer#processTable():422) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2014-03-22 15:46:56,365 [main] INFO  (DfSchemaXmlSerializer#processTable():423) - $ [Table List]
2014-03-22 15:46:56,366 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER(TABLE) // 会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。
2014-03-22 15:46:56,393 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_ADDRESS(TABLE) // 会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。...
2014-03-22 15:46:56,404 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_LOGIN(TABLE) // 会員ログイン: ログインするたびに登録されるログイン履歴。...
2014-03-22 15:46:56,416 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SECURITY(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2014-03-22 15:46:56,426 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SERVICE(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。...
2014-03-22 15:46:56,440 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_STATUS(TABLE) // 会員ステータス: 会員のステータスを示す固定的なマスタテーブル。...
2014-03-22 15:46:56,450 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_WITHDRAWAL(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2014-03-22 15:46:56,459 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT(TABLE) // 商品: 
2014-03-22 15:46:56,477 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_CATEGORY(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2014-03-22 15:46:56,484 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_STATUS(TABLE) // 商品ステータス: 商品のステータスを表現する固定的なマスタ。
2014-03-22 15:46:56,491 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PURCHASE(TABLE) // 購入: 一つの商品に対する購入を表現する。...
2014-03-22 15:46:56,503 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.REGION(TABLE) // 地域: 主に会員の住所に対応する地域。...
2014-03-22 15:46:56,518 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SERVICE_RANK(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2014-03-22 15:46:56,523 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.WITHDRAWAL_REASON(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2014-03-22 15:46:56,527 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_PRODUCT(VIEW)
2014-03-22 15:46:56,529 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_WITHDRAWAL(VIEW)
2014-03-22 15:46:56,533 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 
2014-03-22 15:46:56,533 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ [Table Count]
2014-03-22 15:46:56,534 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - $ 16
2014-03-22 15:46:56,534 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - $ = = = = = = = = = =/
2014-03-22 15:46:56,534 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - 
2014-03-22 15:46:56,536 [main] INFO  (DfSchemaXmlSerializer#processSequence():795) - ...Getting sequences
2014-03-22 15:46:56,539 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():52) - ...Loading sequence informations
2014-03-22 15:46:56,540 [main] INFO  (DfSequenceExtractorBase#selectStringList():75) - select * from INFORMATION_SCHEMA.SEQUENCES where SEQUENCE_SCHEMA in ('PUBLIC')
2014-03-22 15:46:56,542 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():84) - 
[SEQUENCE]
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_A7431E86_07F8_419A_9441_042D22F70A2B = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_A7431E86_07F8_419A_9441_042D22F70A2B:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_2E99FB6C_F7F6_4971_B868_AF2285DC94EF = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_2E99FB6C_F7F6_4971_B868_AF2285DC94EF:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_B894F6A4_D1F0_473D_AF96_D9E8752481BD = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_B894F6A4_D1F0_473D_AF96_D9E8752481BD:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_40EB0DCD_EB50_406C_BF2B_D5348920A0DA = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_40EB0DCD_EB50_406C_BF2B_D5348920A0DA:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_6D6ACE8B_CCF6_40D8_8F97_82F062DB06FA = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_6D6ACE8B_CCF6_40D8_8F97_82F062DB06FA:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_01E9323D_5DA9_43B9_88E9_D07D23F7924C = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_01E9323D_5DA9_43B9_88E9_D07D23F7924C:{null to null, increment 1}
2014-03-22 15:46:56,543 [main] INFO  (DfSchemaXmlSerializer#processSequence():800) - ...Processing sequences: 6
2014-03-22 15:46:56,551 [main] INFO  (DfSchemaXmlSerializer#serialize():301) - ...Serializing XML:
2014-03-22 15:46:56,551 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   filePath = ./schema/project-schema-exampledb.xml
2014-03-22 15:46:56,552 [main] INFO  (DfSchemaXmlSerializer#serialize():303) -   encoding = UTF-8
2014-03-22 15:46:56,600 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1481) - ...Loading next schema (schema diff process)
2014-03-22 15:46:56,601 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:46:56,652 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1496) -  -> same as previous (schema diff)
2014-03-22 15:46:56,652 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:46:56,671 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s860ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2014-03-22 15:46:57,243 [main] INFO  (TorqueDocumentationTask#begin():173) - +------------------------------------------+
2014-03-22 15:46:57,244 [main] INFO  (TorqueDocumentationTask#begin():174) - |                                          |
2014-03-22 15:46:57,244 [main] INFO  (TorqueDocumentationTask#begin():175) - |                   Doc                    |
2014-03-22 15:46:57,244 [main] INFO  (TorqueDocumentationTask#begin():183) - |                                          |
2014-03-22 15:46:57,245 [main] INFO  (TorqueDocumentationTask#begin():184) - +------------------------------------------+
2014-03-22 15:46:57,270 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:46:57,271 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:46:57,271 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:46:57,271 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:46:57,273 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():241) - 
2014-03-22 15:46:57,273 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():242) - * * * * * * * * * * *
2014-03-22 15:46:57,273 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():243) - *                   *
2014-03-22 15:46:57,274 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():244) - *    Schema HTML    *
2014-03-22 15:46:57,274 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():245) - *                   *
2014-03-22 15:46:57,274 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - * * * * * * * * * * *
2014-03-22 15:46:57,348 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:46:57,398 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("doc/ControlDocument.vm", c);
2014-03-22 15:46:57,420 [main] INFO  (Database#doEnableDocumentOutputDirectory():1185) - ...Setting up documentOutputDirectory: ./output/doc
2014-03-22 15:46:57,425 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:46:57,425 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:46:57,427 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:46:57,429 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:46:57,429 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:46:57,430 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:46:57,434 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:46:57,434 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:46:57,436 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:46:57,436 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:46:57,436 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:46:57,437 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:57,437 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:46:57,437 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:46:57,440 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:57,440 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:46:57,441 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:46:57,441 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:46:57,441 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:57,442 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:46:57,442 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:46:57,442 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:46:57,445 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:57,719 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:46:57,722 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:46:57,723 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:46:57,724 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:46:57,725 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:46:57,726 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:46:58,030 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():150) - ...Loading schema history
2014-03-22 15:46:58,050 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():154) -  -> found history: count=5
2014-03-22 15:46:58,073 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:46:58,103 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s858ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Doc}
2014-03-22 15:46:59,479 [main] INFO  (TorqueDataModelTask#begin():104) - +------------------------------------------+
2014-03-22 15:46:59,481 [main] INFO  (TorqueDataModelTask#begin():105) - |                                          |
2014-03-22 15:46:59,481 [main] INFO  (TorqueDataModelTask#begin():106) - |                 Generate                 |
2014-03-22 15:46:59,481 [main] INFO  (TorqueDataModelTask#begin():107) - |                                          |
2014-03-22 15:46:59,481 [main] INFO  (TorqueDataModelTask#begin():108) - +------------------------------------------+
2014-03-22 15:46:59,502 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:46:59,503 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:46:59,503 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:46:59,503 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:46:59,507 [main] INFO  (TorqueDataModelTask#setupControlTemplate():153) - 
2014-03-22 15:46:59,507 [main] INFO  (TorqueDataModelTask#setupControlTemplate():154) - * * * * * * * * *
2014-03-22 15:46:59,508 [main] INFO  (TorqueDataModelTask#setupControlTemplate():155) - * Process Java  *
2014-03-22 15:46:59,508 [main] INFO  (TorqueDataModelTask#setupControlTemplate():156) - * * * * * * * * *
2014-03-22 15:46:59,508 [main] INFO  (TorqueDataModelTask#setupControlTemplate():158) - ...Using Java control: om/ControlGenerateJava.vm
2014-03-22 15:46:59,558 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:46:59,602 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlGenerateJava.vm", c);
2014-03-22 15:46:59,711 [main] INFO  (Database#doEnableGenerateOutputDirectory():1153) - ...Setting up generateOutputDirectory: ../src/main/java
2014-03-22 15:46:59,713 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:46:59,713 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:46:59,714 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:46:59,715 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:46:59,715 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:46:59,716 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:46:59,719 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:46:59,719 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:46:59,720 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:46:59,721 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:46:59,721 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:46:59,721 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:59,721 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:46:59,722 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:46:59,726 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:59,727 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:46:59,727 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:46:59,727 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:46:59,728 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:46:59,728 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:46:59,728 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:46:59,734 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:46:59,738 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:46:59,991 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:46:59,993 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:46:59,994 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:46:59,995 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:46:59,996 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:46:59,998 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:47:00,015 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - /=============================
2014-03-22 15:47:00,015 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():60) - ...Initializing include query.
2014-03-22 15:47:00,015 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - String
2014-03-22 15:47:00,016 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Number
2014-03-22 15:47:00,016 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Date
2014-03-22 15:47:00,016 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotEqual -> []
2014-03-22 15:47:00,016 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   InScope -> []
2014-03-22 15:47:00,017 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotInScope -> []
2014-03-22 15:47:00,017 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():62) - ========/
2014-03-22 15:47:00,027 [main] INFO  (Database#info():2625) - public void parseAllCommon() {
2014-03-22 15:47:00,030 [main] INFO  (Database#info():2625) -     parse('CDef');
2014-03-22 15:47:00,048 [main] INFO  (Database#info():2625) -     parse('DBCurrent');
2014-03-22 15:47:00,051 [main] INFO  (Database#info():2625) -     parse('DBFluteConfig');
2014-03-22 15:47:00,069 [main] INFO  (Database#info():2625) -     parse('DBFluteInitializer');
2014-03-22 15:47:00,073 [main] INFO  (Database#info():2625) -     parse('DBMetaInstanceHandler');
2014-03-22 15:47:00,084 [main] INFO  (Database#info():2625) -     parse('EntityDefinedCommonColumn');
2014-03-22 15:47:00,091 [main] INFO  (Database#info():2625) -     parse('ImplementedBehaviorSelector');
2014-03-22 15:47:00,099 [main] INFO  (Database#info():2625) -     parse('ImplementedCommonColumnAutoSetupper');
2014-03-22 15:47:00,106 [main] INFO  (Database#info():2625) -     parse('ImplementedInvokerAssistant');
2014-03-22 15:47:00,110 [main] INFO  (Database#info():2625) -     parse('ImplementedSqlClauseCreator');
2014-03-22 15:47:00,113 [main] INFO  (Database#info():2625) - }
2014-03-22 15:47:00,114 [main] INFO  (Database#info():2625) - public void parseContainerConfig() {
2014-03-22 15:47:00,114 [main] INFO  (Database#info():2625) -     parse('../resources/dbflute.dicon')
2014-03-22 15:47:00,124 [main] INFO  (Database#info():2625) - }
2014-03-22 15:47:00,132 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldTableClass() {
2014-03-22 15:47:00,162 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:47:00,162 [main] INFO  (Database#info():2625) - public void parseTableClass() {
2014-03-22 15:47:00,163 [main] INFO  (Database#info():2625) -     parse('MEMBER');
2014-03-22 15:47:00,576 [main] INFO  (Database#info():2625) -     parse('MEMBER_ADDRESS');
2014-03-22 15:47:00,842 [main] INFO  (Database#info():2625) -     parse('MEMBER_LOGIN');
2014-03-22 15:47:01,018 [main] INFO  (Database#info():2625) -     parse('MEMBER_SECURITY');
2014-03-22 15:47:01,206 [main] INFO  (Database#info():2625) -     parse('MEMBER_SERVICE');
2014-03-22 15:47:01,430 [main] INFO  (Database#info():2625) -     parse('MEMBER_STATUS');
2014-03-22 15:47:01,579 [main] INFO  (Database#info():2625) -     parse('MEMBER_WITHDRAWAL');
2014-03-22 15:47:01,728 [main] INFO  (Database#info():2625) -     parse('PRODUCT');
2014-03-22 15:47:01,912 [main] INFO  (Database#info():2625) -     parse('PRODUCT_CATEGORY');
2014-03-22 15:47:02,055 [main] INFO  (Database#info():2625) -     parse('PRODUCT_STATUS');
2014-03-22 15:47:02,207 [main] INFO  (Database#info():2625) -     parse('PURCHASE');
2014-03-22 15:47:02,371 [main] INFO  (Database#info():2625) -     parse('REGION');
2014-03-22 15:47:02,526 [main] INFO  (Database#info():2625) -     parse('SERVICE_RANK');
2014-03-22 15:47:02,650 [main] INFO  (Database#info():2625) -     parse('SUMMARY_PRODUCT');
2014-03-22 15:47:02,742 [main] INFO  (Database#info():2625) -     parse('SUMMARY_WITHDRAWAL');
2014-03-22 15:47:02,835 [main] INFO  (Database#info():2625) -     parse('WITHDRAWAL_REASON');
2014-03-22 15:47:02,963 [main] INFO  (Database#info():2625) - }
2014-03-22 15:47:02,963 [main] INFO  (Database#info():2625) -  
2014-03-22 15:47:03,000 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:47:03,005 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s523ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Generate}
2014-03-22 15:47:03,443 [main] INFO  (DfOutsideSqlTestTask#begin():72) - +------------------------------------------+
2014-03-22 15:47:03,444 [main] INFO  (DfOutsideSqlTestTask#begin():73) - |                                          |
2014-03-22 15:47:03,444 [main] INFO  (DfOutsideSqlTestTask#begin():74) - |              OutsideSqlTest              |
2014-03-22 15:47:03,444 [main] INFO  (DfOutsideSqlTestTask#begin():75) - |                                          |
2014-03-22 15:47:03,444 [main] INFO  (DfOutsideSqlTestTask#begin():76) - +------------------------------------------+
2014-03-22 15:47:03,465 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:47:03,465 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:47:03,465 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:47:03,465 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:47:03,484 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:47:03,488 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s043ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2014-03-22 15:47:03,921 [main] INFO  (DfSql2EntityTask#begin():100) - +------------------------------------------+
2014-03-22 15:47:03,923 [main] INFO  (DfSql2EntityTask#begin():101) - |                                          |
2014-03-22 15:47:03,923 [main] INFO  (DfSql2EntityTask#begin():102) - |                Sql2Entity                |
2014-03-22 15:47:03,923 [main] INFO  (DfSql2EntityTask#begin():103) - |                                          |
2014-03-22 15:47:03,923 [main] INFO  (DfSql2EntityTask#begin():104) - +------------------------------------------+
2014-03-22 15:47:03,948 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:47:03,948 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:47:03,948 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:47:03,949 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:47:03,953 [main] INFO  (DfSql2EntityTask#setupControlTemplate():172) - 
2014-03-22 15:47:03,954 [main] INFO  (DfSql2EntityTask#setupControlTemplate():173) - * * * * * * * * *
2014-03-22 15:47:03,954 [main] INFO  (DfSql2EntityTask#setupControlTemplate():174) - * Process Java  *
2014-03-22 15:47:03,954 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - * * * * * * * * *
2014-03-22 15:47:03,954 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - ...Using Java control: om/ControlSql2EntityJava.vm
2014-03-22 15:47:03,958 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:47:04,002 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:47:04,062 [main] INFO  (DfSql2EntityTask#initControlContext():329) - 
2014-03-22 15:47:04,062 [main] INFO  (DfSql2EntityTask#initControlContext():330) - ...Preparing generation of customize-entities and parameter-beans
2014-03-22 15:47:04,062 [main] INFO  (DfSql2EntityTask#initControlContext():331) - * * * * * * * * * *
2014-03-22 15:47:04,063 [main] INFO  (DfSql2EntityTask#initControlContext():332) - * CustomizeEntity *
2014-03-22 15:47:04,063 [main] INFO  (DfSql2EntityTask#initControlContext():333) - * * * * * * * * * *
2014-03-22 15:47:04,063 [main] INFO  (DfSql2EntityTask#showParameterBean():899) - * * * * * * * * *
2014-03-22 15:47:04,063 [main] INFO  (DfSql2EntityTask#showParameterBean():900) - * ParameterBean *
2014-03-22 15:47:04,063 [main] INFO  (DfSql2EntityTask#showParameterBean():901) - * * * * * * * * *
2014-03-22 15:47:04,065 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlSql2EntityJava.vm", c);
2014-03-22 15:47:04,126 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:47:04,390 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:47:04,393 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:47:04,394 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:47:04,395 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:47:04,396 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:47:04,398 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:47:04,418 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1169) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2014-03-22 15:47:04,421 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldCustomizeClass() {
2014-03-22 15:47:04,428 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:47:04,429 [main] INFO  (Database#info():2625) - public void parseCustomizeEntity() {
2014-03-22 15:47:04,429 [main] INFO  (Database#info():2625) - }
2014-03-22 15:47:04,445 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():321) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2014-03-22 15:47:04,446 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:47:04,451 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s527ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2014-03-22 15:50:38,087 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2014-03-22 15:50:38,089 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2014-03-22 15:50:38,089 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2014-03-22 15:50:38,101 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2014-03-22 15:50:38,102 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2014-03-22 15:50:38,104 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2014-03-22 15:50:38,132 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:38,133 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:38,133 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:38,134 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:38,139 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:50:38,461 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:50:38,462 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:50:38,472 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2014-03-22 15:50:38,473 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2014-03-22 15:50:38,473 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2014-03-22 15:50:38,474 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2014-03-22 15:50:38,474 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2014-03-22 15:50:38,474 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2014-03-22 15:50:38,483 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:50:38,484 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:38,484 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:50:38,497 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2014-03-22 15:50:38,503 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2014-03-22 15:50:38,503 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2014-03-22 15:50:38,504 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2014-03-22 15:50:38,505 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2014-03-22 15:50:38,505 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2014-03-22 15:50:38,510 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2014-03-22 15:50:38,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_NAME VARCHAR(200) NOT NULL,
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL,
    MEMBER_STATUS_CODE CHAR(3) NOT NULL,
    FORMALIZED_DATETIME DATETIME,
    BIRTHDATE DATE,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,521 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    VALID_BEGIN_DATE DATE NOT NULL,
    VALID_END_DATE DATE NOT NULL,
    ADDRESS VARCHAR(200) NOT NULL,
    REGION_ID INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,524 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    LOGIN_DATETIME DATETIME NOT NULL,
    MOBILE_LOGIN_FLG INTEGER NOT NULL,
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL
)
2014-03-22 15:50:38,527 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    LOGIN_PASSWORD VARCHAR(50) NOT NULL,
    REMINDER_QUESTION VARCHAR(50) NOT NULL,
    REMINDER_ANSWER VARCHAR(50) NOT NULL,
    REMINDER_USE_COUNT INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,529 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_SERVICE_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    SERVICE_POINT_COUNT INTEGER NOT NULL,
    SERVICE_RANK_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,532 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_CODE CHAR(3),
    WITHDRAWAL_REASON_INPUT_TEXT TEXT,
    WITHDRAWAL_DATETIME DATETIME NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,534 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    PURCHASE_DATETIME DATETIME NOT NULL,
    PURCHASE_COUNT INTEGER NOT NULL,
    PURCHASE_PRICE INTEGER NOT NULL,
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL,
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:50:38,542 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL,
    PARENT_CATEGORY_CODE CHAR(3)
)
2014-03-22 15:50:38,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:50:38,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL PRIMARY KEY,
    REGION_NAME VARCHAR(50) NOT NULL
)
2014-03-22 15:50:38,547 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL PRIMARY KEY,
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL,
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL,
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:50:38,549 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:50:38,551 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:50:38,553 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:50:38,559 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,562 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) references REGION (REGION_ID)
2014-03-22 15:50:38,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:50:38,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,573 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2014-03-22 15:50:38,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,577 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2014-03-22 15:50:38,584 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:50:38,587 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2014-03-22 15:50:38,589 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:50:38,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2014-03-22 15:50:38,596 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:50:38,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER add constraint UQ_MEMBER_MEMBER_ACCOUNT UNIQUE (MEMBER_ACCOUNT)
2014-03-22 15:50:38,599 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_ADDRESS add constraint UQ_MEMBER_ADDRESS UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
2014-03-22 15:50:38,600 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_LOGIN add constraint UQ_MEMBER_LOGIN UNIQUE (MEMBER_ID, LOGIN_DATETIME)
2014-03-22 15:50:38,602 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE UNIQUE (MEMBER_ID)
2014-03-22 15:50:38,603 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PURCHASE add constraint UQ_PURCHASE UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:50:38,605 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT add constraint UQ_PRODUCT_PRODUCT_HANDLE_CODE UNIQUE (PRODUCT_HANDLE_CODE)
2014-03-22 15:50:38,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_STATUS add constraint UQ_MEMBER_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:50:38,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint UQ_PRODUCT_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:50:38,609 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table SERVICE_RANK add constraint UQ_SERVICE_RANK_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:50:38,611 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table WITHDRAWAL_REASON add constraint UQ_WITHDRAWAL_REASON_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:50:38,612 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2014-03-22 15:50:38,613 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2014-03-22 15:50:38,614 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2014-03-22 15:50:38,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2014-03-22 15:50:38,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:50:38,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2014-03-22 15:50:38,619 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2014-03-22 15:50:38,619 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2014-03-22 15:50:38,620 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=47 failure=0
2014-03-22 15:50:38,621 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-20-view.sql
2014-03-22 15:50:38,622 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is defined at DBFlute property
create view SUMMARY_PRODUCT as
select product.PRODUCT_ID
     , product.PRODUCT_NAME
     , product.PRODUCT_HANDLE_CODE
     , product.PRODUCT_STATUS_CODE
     , (select max(purchase.PURCHASE_DATETIME)
          from PURCHASE purchase
         where purchase.PRODUCT_ID = product.PRODUCT_ID
       ) as LATEST_PURCHASE_DATETIME
  from PRODUCT product
2014-03-22 15:50:38,625 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is NOT defined at DBFlute property
-- treated as no-primary-key table 
create view SUMMARY_WITHDRAWAL as
select withdrawal.MEMBER_ID
     , member.MEMBER_NAME
     , withdrawal.WITHDRAWAL_REASON_CODE
     , reason.WITHDRAWAL_REASON_TEXT
     , withdrawal.WITHDRAWAL_REASON_INPUT_TEXT
     , withdrawal.WITHDRAWAL_DATETIME
     , member.MEMBER_STATUS_CODE
     , status.MEMBER_STATUS_NAME
     , (select max(purchase.PURCHASE_PRICE)
          from PURCHASE purchase
         where purchase.MEMBER_ID = member.MEMBER_ID
       ) as MAX_PURCHASE_PRICE
  from MEMBER_WITHDRAWAL withdrawal
    left outer join WITHDRAWAL_REASON reason
      on withdrawal.WITHDRAWAL_REASON_CODE = reason.WITHDRAWAL_REASON_CODE
    left outer join MEMBER member
      on withdrawal.MEMBER_ID = member.MEMBER_ID
    left outer join MEMBER_STATUS status
      on member.MEMBER_STATUS_CODE = status.MEMBER_STATUS_CODE
2014-03-22 15:50:38,630 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2014-03-22 15:50:38,630 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-80-comment.sql
2014-03-22 15:50:38,634 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER
comment on table MEMBER is '会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。'
2014-03-22 15:50:38,637 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ID is '会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。'
2014-03-22 15:50:38,638 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_NAME is '会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。'
2014-03-22 15:50:38,639 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ACCOUNT is '会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。'
2014-03-22 15:50:38,642 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。'
2014-03-22 15:50:38,643 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.FORMALIZED_DATETIME is '正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。'
2014-03-22 15:50:38,644 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER.BIRTHDATE is '生年月日: 必須項目ではないので、このデータがない会員もいる。'
2014-03-22 15:50:38,645 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_DATETIME is '登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。'
2014-03-22 15:50:38,648 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_USER is '登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。'
2014-03-22 15:50:38,651 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_DATETIME is '更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。'
2014-03-22 15:50:38,654 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_USER is '更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。'
2014-03-22 15:50:38,656 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.VERSION_NO is 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。'
2014-03-22 15:50:38,661 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_ADDRESS
comment on table MEMBER_ADDRESS is '会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。'
2014-03-22 15:50:38,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ADDRESS_ID is '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。'
2014-03-22 15:50:38,664 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ID is '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。'
2014-03-22 15:50:38,665 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_BEGIN_DATE is '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。'
2014-03-22 15:50:38,666 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_END_DATE is '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。'
2014-03-22 15:50:38,667 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_ADDRESS.ADDRESS is '住所: まるごと住所'
2014-03-22 15:50:38,668 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.REGION_ID is '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）'
2014-03-22 15:50:38,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SECURITY
comment on table MEMBER_SECURITY is '会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2014-03-22 15:50:38,671 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.MEMBER_ID is '会員ID: そのまま one-to-one を構成するためのFKとなる。'
2014-03-22 15:50:38,672 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.LOGIN_PASSWORD is 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。'
2014-03-22 15:50:38,673 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_QUESTION is 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。'
2014-03-22 15:50:38,673 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_ANSWER is 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。'
2014-03-22 15:50:38,674 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.REMINDER_USE_COUNT is 'リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。'
2014-03-22 15:50:38,676 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SERVICE
comment on table MEMBER_SERVICE is '会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。'
2014-03-22 15:50:38,677 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_SERVICE_ID is '会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。'
2014-03-22 15:50:38,678 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_ID is '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。'
2014-03-22 15:50:38,679 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_POINT_COUNT is 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。'
2014-03-22 15:50:38,680 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。'
2014-03-22 15:50:38,681 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_WITHDRAWAL
comment on table MEMBER_WITHDRAWAL is '会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。'
2014-03-22 15:50:38,682 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_CODE is '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。'
2014-03-22 15:50:38,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_INPUT_TEXT is '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。'
2014-03-22 15:50:38,685 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_DATETIME is '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。'
2014-03-22 15:50:38,686 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_LOGIN
comment on table MEMBER_LOGIN is '会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。'
2014-03-22 15:50:38,687 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_LOGIN_ID is '会員ログインID: '
2014-03-22 15:50:38,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_ID is '会員ID: '
2014-03-22 15:50:38,689 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_DATETIME is 'ログイン日時: ログインした瞬間の日時。'
2014-03-22 15:50:38,689 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MOBILE_LOGIN_FLG is 'モバイルログインフラグ: モバイル機器からのログインか否か。'
2014-03-22 15:50:38,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_MEMBER_STATUS_CODE is 'ログイン会員ステータスコード: ログイン時の会員ステータス'
2014-03-22 15:50:38,691 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PURCHASE
comment on table PURCHASE is '購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。'
2014-03-22 15:50:38,692 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.MEMBER_ID is '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。'
2014-03-22 15:50:38,693 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PRODUCT_ID is '商品ID: 商品を参照するID。'
2014-03-22 15:50:38,694 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_DATETIME is '購入日時: 購入した瞬間の日時。'
2014-03-22 15:50:38,695 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_COUNT is '購入数量: 購入した商品の（一回の購入における）数量。'
2014-03-22 15:50:38,696 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.PURCHASE_PRICE is '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。'
2014-03-22 15:50:38,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PAYMENT_COMPLETE_FLG is '支払完了フラグ: この購入に関しての支払いが完了しているか否か。'
2014-03-22 15:50:38,699 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT
comment on table PRODUCT is '商品: '
2014-03-22 15:50:38,700 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PRODUCT.PRODUCT_NAME is '商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。'
2014-03-22 15:50:38,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT.PRODUCT_HANDLE_CODE is '商品ハンドルコード: 商品を識別する業務上のコード。'
2014-03-22 15:50:38,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_STATUS
comment on table MEMBER_STATUS is '会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。'
2014-03-22 15:50:38,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
'
2014-03-22 15:50:38,704 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_STATUS.MEMBER_STATUS_NAME is '会員ステータス名称: '
2014-03-22 15:50:38,705 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DESCRIPTION is '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。'
2014-03-22 15:50:38,706 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DISPLAY_ORDER is '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。'
2014-03-22 15:50:38,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- SERVICE_RANK
comment on table SERVICE_RANK is 'サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2014-03-22 15:50:38,708 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを識別するコード。'
2014-03-22 15:50:38,709 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_RANK_NAME is 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）'
2014-03-22 15:50:38,710 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_POINT_INCIDENCE is 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。'
2014-03-22 15:50:38,711 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.NEW_ACCEPTABLE_FLG is '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。'
2014-03-22 15:50:38,712 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DESCRIPTION is '説明: ランクに関する業務的な説明。'
2014-03-22 15:50:38,713 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DISPLAY_ORDER is '表示順: UI上の表示順を表現する番号。'
2014-03-22 15:50:38,714 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_CATEGORY
comment on table PRODUCT_CATEGORY is '商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2014-03-22 15:50:38,715 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_CODE is '商品カテゴリコード: '
2014-03-22 15:50:38,715 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_NAME is '商品カテゴリ名称: '
2014-03-22 15:50:38,716 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PARENT_CATEGORY_CODE is '親カテゴリコード: 最上位の場合はデータなし。'
2014-03-22 15:50:38,717 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_STATUS
comment on table PRODUCT_STATUS is '商品ステータス: 商品のステータスを表現する固定的なマスタ。'
2014-03-22 15:50:38,718 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_STATUS.PRODUCT_STATUS_CODE is '商品ステータスコード: 商品ステータスを識別するコード。'
2014-03-22 15:50:38,719 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- REGION
comment on table REGION is '地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。'
2014-03-22 15:50:38,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column REGION.REGION_ID is '地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。'
2014-03-22 15:50:38,721 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column REGION.REGION_NAME is '地域名称: 地域を表す名称。'
2014-03-22 15:50:38,722 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- WITHDRAWAL_REASON
comment on table WITHDRAWAL_REASON is '退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2014-03-22 15:50:38,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_CODE is '退会理由コード: '
2014-03-22 15:50:38,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_TEXT is '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。'
2014-03-22 15:50:38,724 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=74 failure=0
2014-03-22 15:50:38,725 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=123 failure=0 (in 3 files)
2014-03-22 15:50:38,755 [main] INFO  (DfLoadDataProcess#execute():129) - 
2014-03-22 15:50:38,756 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2014-03-22 15:50:38,756 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2014-03-22 15:50:38,757 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2014-03-22 15:50:38,757 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2014-03-22 15:50:38,758 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2014-03-22 15:50:38,786 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:50:38,787 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/common/xls/10-master.xls)
2014-03-22 15:50:38,787 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:50:38,987 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:50:38,988 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:38,988 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:50:39,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2014-03-22 15:50:39,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2014-03-22 15:50:39,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2014-03-22 15:50:39,045 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to MEMBER_STATUS
2014-03-22 15:50:39,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{1, アメリカ}
2014-03-22 15:50:39,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{2, カナダ}
2014-03-22 15:50:39,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{3, 中国}
2014-03-22 15:50:39,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{4, 千葉}
2014-03-22 15:50:39,050 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to REGION
2014-03-22 15:50:39,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2014-03-22 15:50:39,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2014-03-22 15:50:39,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2014-03-22 15:50:39,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2014-03-22 15:50:39,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2014-03-22 15:50:39,064 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to SERVICE_RANK
2014-03-22 15:50:39,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2014-03-22 15:50:39,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2014-03-22 15:50:39,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2014-03-22 15:50:39,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2014-03-22 15:50:39,070 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2014-03-22 15:50:39,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2014-03-22 15:50:39,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{FOD, 食品, null}
2014-03-22 15:50:39,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2014-03-22 15:50:39,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2014-03-22 15:50:39,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2014-03-22 15:50:39,075 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2014-03-22 15:50:39,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2014-03-22 15:50:39,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{PST, 生産中止, 2}
2014-03-22 15:50:39,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{SST, 販売中止, 3}
2014-03-22 15:50:39,078 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to PRODUCT_STATUS
2014-03-22 15:50:39,080 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:50:39,081 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/ut/reversexls/cyclic-data-01-MEMBER-plus.xls)
2014-03-22 15:50:39,081 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:50:39,251 [main] INFO  (DfLoadingControlProp#analyzeLoadingControlMap():470) - ...Analyzing loadingControlMap:
2014-03-22 15:50:39,253 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():549) - map:{
2014-03-22 15:50:39,253 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     loggingInsertType = PART
2014-03-22 15:50:39,254 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressBatchUpdate = false
2014-03-22 15:50:39,254 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressColumnDefCheck = false
2014-03-22 15:50:39,254 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():552) -     dateAdjustmentMap = map:{
2014-03-22 15:50:39,255 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceYears = 1
2014-03-22 15:50:39,255 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceMonths = 11
2014-03-22 15:50:39,255 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceDays = 339
2014-03-22 15:50:39,256 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:originDate = 2013/04/17
2014-03-22 15:50:39,256 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         $$ALL$$ = {$$ALL$$=addDay($distance), FORMALIZED_DATETIME=addDay(0), LOGIN_DATETIME=addDay(0)}
2014-03-22 15:50:39,257 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER = {BIRTHDATE=addDay(0)}
2014-03-22 15:50:39,257 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER_ADDRESS = {$$ALL$$=addDay(0)}
2014-03-22 15:50:39,257 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         WHITE_XLS_MAN = {$$ALL$$=addDay(0)}
2014-03-22 15:50:39,257 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():559) -     }
2014-03-22 15:50:39,258 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():565) - }
2014-03-22 15:50:39,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10.000, 1965/03/03 00:00:00.000, 2013/12/28 13:43:53.816, foo, 2013/12/28 13:43:53.816, foo, 0}
2014-03-22 15:50:39,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15 00:00:00.000, 2013/12/28 13:43:53.823, foo, 2013/12/28 13:43:53.823, foo, 0}
2014-03-22 15:50:39,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30.000, null, 2013/12/28 13:43:53.825, foo, 2013/12/28 13:43:53.825, foo, 0}
2014-03-22 15:50:39,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40.000, 1978/09/11 00:00:00.000, 2013/12/28 13:43:53.828, foo, 2013/12/28 13:43:53.828, foo, 0}
2014-03-22 15:50:39,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50.000, null, 2013/12/28 13:43:53.830, foo, 2013/12/28 13:43:53.830, foo, 0}
2014-03-22 15:50:39,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40.000, 1969/02/20 00:00:00.000, 2013/12/28 13:43:53.832, foo, 2013/12/28 13:43:53.832, foo, 0}
2014-03-22 15:50:39,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30.000, null, 2013/12/28 13:43:53.836, foo, 2013/12/28 13:43:53.836, foo, 0}
2014-03-22 15:50:39,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20.000, null, 2013/12/28 13:43:53.838, foo, 2013/12/28 13:43:53.838, foo, 0}
2014-03-22 15:50:39,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00.000, 1967/02/20 00:00:00.000, 2013/12/28 13:43:53.841, foo, 2013/12/28 13:43:53.841, foo, 0}
2014-03-22 15:50:39,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2013/12/28 13:43:53.844, foo, 2013/12/28 13:43:53.844, foo, 0}
2014-03-22 15:50:39,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER:{... more several records}
2014-03-22 15:50:39,391 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER
2014-03-22 15:50:39,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{1, 1, 2007/03/24 00:00:00.000, 2015/12/31 00:00:00.000, Nagara, 4, 2013/01/23 13:43:53.954, foo, 2013/01/23 13:43:53.954, foo, 0}
2014-03-22 15:50:39,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{2, 1, 1949/01/01 00:00:00.000, 1997/03/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.958, foo, 2013/01/23 13:43:53.958, foo, 0}
2014-03-22 15:50:39,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{3, 1, 1997/04/01 00:00:00.000, 2000/09/30 00:00:00.000, Los Angels, 1, 2013/01/23 13:43:53.960, foo, 2013/01/23 13:43:53.960, foo, 0}
2014-03-22 15:50:39,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{4, 1, 2000/10/01 00:00:00.000, 2003/08/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.963, foo, 2013/01/23 13:43:53.963, foo, 0}
2014-03-22 15:50:39,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{5, 1, 2003/09/01 00:00:00.000, 2004/12/22 00:00:00.000, San Francisco Powell, 1, 2013/01/23 13:43:53.965, foo, 2013/01/23 13:43:53.965, foo, 0}
2014-03-22 15:50:39,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{6, 1, 2004/12/23 00:00:00.000, 2006/03/23 00:00:00.000, San Francisco Daly City, 1, 2013/01/23 13:43:53.968, foo, 2013/01/23 13:43:53.968, foo, 0}
2014-03-22 15:50:39,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{7, 1, 2016/01/01 00:00:00.000, 9999/12/31 00:00:00.000, Victoria, 2, 2013/01/23 13:43:53.970, foo, 2013/01/23 13:43:53.970, foo, 0}
2014-03-22 15:50:39,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{8, 2, 2004/12/24 00:00:00.000, 9999/12/31 00:00:00.000, Ichihara, 4, 2013/01/23 13:43:53.973, foo, 2013/01/23 13:43:53.973, foo, 0}
2014-03-22 15:50:39,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{9, 3, 2004/12/24 00:00:00.000, 2007/03/23 00:00:00.000, Mobara, 4, 2013/01/23 13:43:53.975, foo, 2013/01/23 13:43:53.975, foo, 0}
2014-03-22 15:50:39,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{10, 4, 2002/11/01 00:00:00.000, 9999/12/31 00:00:00.000, Sousa, 4, 2013/01/23 13:43:53.977, foo, 2013/01/23 13:43:53.977, foo, 0}
2014-03-22 15:50:39,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_ADDRESS:{... more several records}
2014-03-22 15:50:39,481 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_ADDRESS
2014-03-22 15:50:39,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59.000, 0, FML}
2014-03-22 15:50:39,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16.000, 0, FML}
2014-03-22 15:50:39,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29.000, 0, FML}
2014-03-22 15:50:39,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00.000, 0, FML}
2014-03-22 15:50:39,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59.000, 0, FML}
2014-03-22 15:50:39,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01.000, 0, PRV}
2014-03-22 15:50:39,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59.000, 1, FML}
2014-03-22 15:50:39,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00.000, 0, FML}
2014-03-22 15:50:39,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59.000, 0, FML}
2014-03-22 15:50:39,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00.000, 0, FML}
2014-03-22 15:50:39,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_LOGIN:{... more several records}
2014-03-22 15:50:39,549 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 56 rows are loaded to MEMBER_LOGIN
2014-03-22 15:50:39,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 0, 2013/12/28 13:43:54.206, foo, 2013/12/28 13:43:54.206, foo, 0}
2014-03-22 15:50:39,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2013/12/28 13:43:54.208, foo, 2013/12/28 13:43:54.208, foo, 0}
2014-03-22 15:50:39,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2013/12/28 13:43:54.209, foo, 2013/12/28 13:43:54.209, foo, 0}
2014-03-22 15:50:39,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 12, 2013/12/28 13:43:54.211, foo, 2013/12/28 13:43:54.211, foo, 0}
2014-03-22 15:50:39,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 410, 2013/12/28 13:43:54.212, foo, 2013/12/28 13:43:54.212, foo, 0}
2014-03-22 15:50:39,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2, 2013/12/28 13:43:54.213, foo, 2013/12/28 13:43:54.213, foo, 0}
2014-03-22 15:50:39,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 4, 2013/12/28 13:43:54.214, foo, 2013/12/28 13:43:54.214, foo, 0}
2014-03-22 15:50:39,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 9, 2013/12/28 13:43:54.215, foo, 2013/12/28 13:43:54.215, foo, 0}
2014-03-22 15:50:39,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 25, 2013/12/28 13:43:54.216, foo, 2013/12/28 13:43:54.216, foo, 0}
2014-03-22 15:50:39,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 8, 2013/12/28 13:43:54.217, foo, 2013/12/28 13:43:54.217, foo, 0}
2014-03-22 15:50:39,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SECURITY:{... more several records}
2014-03-22 15:50:39,586 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SECURITY
2014-03-22 15:50:39,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2013/12/28 13:43:54.233, foo, 2013/12/28 13:43:54.233, foo, 0}
2014-03-22 15:50:39,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2013/12/28 13:43:54.234, foo, 2013/12/28 13:43:54.234, foo, 0}
2014-03-22 15:50:39,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2013/12/28 13:43:54.235, foo, 2013/12/28 13:43:54.235, foo, 0}
2014-03-22 15:50:39,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2013/12/28 13:43:54.236, foo, 2013/12/28 13:43:54.236, foo, 0}
2014-03-22 15:50:39,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2013/12/28 13:43:54.237, foo, 2013/12/28 13:43:54.238, foo, 0}
2014-03-22 15:50:39,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2013/12/28 13:43:54.239, foo, 2013/12/28 13:43:54.239, foo, 0}
2014-03-22 15:50:39,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2013/12/28 13:43:54.240, foo, 2013/12/28 13:43:54.240, foo, 0}
2014-03-22 15:50:39,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{8, 8, 234, SIL, 2013/12/28 13:43:54.241, foo, 2013/12/28 13:43:54.241, foo, 0}
2014-03-22 15:50:39,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{9, 9, 3, SIL, 2013/12/28 13:43:54.243, foo, 2013/12/28 13:43:54.243, foo, 0}
2014-03-22 15:50:39,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2013/12/28 13:43:54.244, foo, 2013/12/28 13:43:54.244, foo, 0}
2014-03-22 15:50:39,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SERVICE:{... more several records}
2014-03-22 15:50:39,639 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SERVICE
2014-03-22 15:50:39,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2007/11/28 23:59:59.123, 2013/12/28 13:43:54.269, foo, 2013/12/28 13:43:54.269, foo, 0}
2014-03-22 15:50:39,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{6, SIT, null, 2008/10/15 16:00:00.456, 2013/12/28 13:43:54.271, foo, 2013/12/28 13:43:54.271, foo, 0}
2014-03-22 15:50:39,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2007/11/28 05:52:29.789, 2013/12/28 13:43:54.273, foo, 2013/12/28 13:43:54.273, foo, 0}
2014-03-22 15:50:39,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2008/10/17 16:00:00.456, 2013/12/28 13:43:54.275, foo, 2013/12/28 13:43:54.275, foo, 0}
2014-03-22 15:50:39,648 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2014-03-22 15:50:39,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2013/12/28 13:43:54.363, foo, 2013/12/28 13:43:54.363, foo, 0}
2014-03-22 15:50:39,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2013/12/28 13:43:54.365, foo, 2013/12/28 13:43:54.365, foo, 0}
2014-03-22 15:50:39,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2013/12/28 13:43:54.366, foo, 2013/12/28 13:43:54.366, foo, 0}
2014-03-22 15:50:39,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2013/12/28 13:43:54.368, foo, 2013/12/28 13:43:54.368, foo, 0}
2014-03-22 15:50:39,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2013/12/28 13:43:54.369, foo, 2013/12/28 13:43:54.369, foo, 0}
2014-03-22 15:50:39,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2013/12/28 13:43:54.370, foo, 2013/12/28 13:43:54.370, foo, 0}
2014-03-22 15:50:39,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2013/12/28 13:43:54.371, foo, 2013/12/28 13:43:54.371, foo, 0}
2014-03-22 15:50:39,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2013/12/28 13:43:54.372, foo, 2013/12/28 13:43:54.372, foo, 0}
2014-03-22 15:50:39,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2013/12/28 13:43:54.374, foo, 2013/12/28 13:43:54.374, foo, 0}
2014-03-22 15:50:39,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2013/12/28 13:43:54.375, foo, 2013/12/28 13:43:54.375, foo, 0}
2014-03-22 15:50:39,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PRODUCT:{... more several records}
2014-03-22 15:50:39,680 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to PRODUCT
2014-03-22 15:50:39,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{1, 5, 3, 2007/11/28 23:59:59.000, 1, 1800, 1, 2013/12/28 13:43:54.401, foo, 2013/12/28 13:43:54.401, foo, 0}
2014-03-22 15:50:39,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{2, 15, 7, 2008/10/15 16:16:16.000, 1, 1700, 1, 2013/12/28 13:43:54.408, foo, 2013/12/28 13:43:54.408, foo, 0}
2014-03-22 15:50:39,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{3, 13, 3, 2007/11/27 22:56:29.235, 1, 1800, 1, 2013/12/28 13:43:54.410, foo, 2013/12/28 13:43:54.410, foo, 0}
2014-03-22 15:50:39,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{4, 2, 5, 2008/10/05 02:13:00.000, 2, 1700, 1, 2013/12/28 13:43:54.411, foo, 2013/12/28 13:43:54.411, foo, 0}
2014-03-22 15:50:39,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{5, 9, 11, 2008/12/08 23:12:59.000, 5, 1800, 1, 2013/12/28 13:43:54.413, foo, 2013/12/28 13:43:54.413, foo, 0}
2014-03-22 15:50:39,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{6, 20, 2, 2002/12/06 16:32:01.000, 1, 2000, 1, 2013/12/28 13:43:54.415, foo, 2013/12/28 13:43:54.415, foo, 0}
2014-03-22 15:50:39,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{7, 19, 9, 2007/01/02 23:59:59.999, 1, 1000, 0, 2013/12/28 13:43:54.417, foo, 2013/12/28 13:43:54.417, foo, 0}
2014-03-22 15:50:39,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{8, 4, 7, 2008/10/13 16:23:00.000, 1, 1535, 1, 2013/12/28 13:43:54.418, foo, 2013/12/28 13:43:54.418, foo, 0}
2014-03-22 15:50:39,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{9, 4, 10, 2007/11/26 23:59:59.000, 20, 1700, 1, 2013/12/28 13:43:54.420, foo, 2013/12/28 13:43:54.420, foo, 0}
2014-03-22 15:50:39,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{10, 2, 10, 2008/10/05 02:13:00.345, 1, 1700, 0, 2013/12/28 13:43:54.422, foo, 2013/12/28 13:43:54.422, foo, 0}
2014-03-22 15:50:39,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PURCHASE:{... more several records}
2014-03-22 15:50:39,806 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 60 rows are loaded to PURCHASE
2014-03-22 15:50:39,807 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2014-03-22 15:50:39,814 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:39,815 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:50:39,818 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:50:39,819 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:50:39,820 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:50:39,821 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:50:39,823 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:50:39,827 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:50:39,828 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:50:39,829 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2014-03-22 15:50:39,830 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2014-03-22 15:50:39,833 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2014-03-22 15:50:39,833 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2014-03-22 15:50:39,833 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2014-03-22 15:50:39,833 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2014-03-22 15:50:39,834 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2014-03-22 15:50:39,836 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2014-03-22 15:50:39,840 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2014-03-22 15:50:39,841 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     Business Constraint
--                                                                     ===================
-- #df:assertCountZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Formalized members should have their own formalized date-times.
-- - - - - - - - - - -/
select count(*)
  from MEMBER
 where MEMBER_STATUS_CODE = 'FML'
   and FORMALIZED_DATETIME is null
2014-03-22 15:50:39,846 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Withdrawal members should have their own withdrawal informations.
-- - - - - - - - - - -/
select member.MEMBER_ID, member.MEMBER_NAME
  from MEMBER member
 where member.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select withdrawal.MEMBER_ID
                     from MEMBER_WITHDRAWAL withdrawal
                    where withdrawal.MEMBER_ID = member.MEMBER_ID
       )
2014-03-22 15:50:39,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  and subadr.VALID_BEGIN_DATE < adr.VALID_END_DATE
       )
2014-03-22 15:50:39,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     TestData Constraint
--                                                                     ===================
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- These tables should have at least one record at ut and should not have at real.
-- - - - - - - - - - -/
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER member
2014-03-22 15:50:39,852 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=20
2014-03-22 15:50:39,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER_LOGIN login
2014-03-22 15:50:39,853 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=56
2014-03-22 15:50:39,853 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=5 failure=0
2014-03-22 15:50:39,854 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=5 failure=0 (in 1 files)
2014-03-22 15:50:39,854 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:50:39,923 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s834ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example

 {Create Schema}: success=123 failure=0 (in 3 files)
  o replace-schema-10-basic.sql
  o replace-schema-20-view.sql
  o replace-schema-80-comment.sql

 {Load Data}: loaded-files=2
  (common)
  o 10-master.xls
  (ut)
  o cyclic-data-01-MEMBER-plus.xls

 {Take Finally}: success=5 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2014-03-22 15:50:40,437 [main] INFO  (TorqueJDBCTransformTask#begin():100) - +------------------------------------------+
2014-03-22 15:50:40,440 [main] INFO  (TorqueJDBCTransformTask#begin():101) - |                                          |
2014-03-22 15:50:40,440 [main] INFO  (TorqueJDBCTransformTask#begin():102) - |                   JDBC                   |
2014-03-22 15:50:40,440 [main] INFO  (TorqueJDBCTransformTask#begin():103) - |                                          |
2014-03-22 15:50:40,441 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2014-03-22 15:50:40,471 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:40,472 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:40,472 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:40,472 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:40,501 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - 
2014-03-22 15:50:40,502 [main] INFO  (DfSchemaXmlSerializer#serialize():287) - ...Starting to process JDBC to SchemaXML
2014-03-22 15:50:40,502 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1463) - ...Loading previous schema (schema diff process)
2014-03-22 15:50:40,515 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:50:40,611 [main] INFO  (DfSchemaXmlSerializer#generateXML():361) - ...Getting DB connection
2014-03-22 15:50:40,612 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:50:40,892 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:50:40,892 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:50:40,893 [main] INFO  (DfSchemaXmlSerializer#generateXML():364) - ...Getting DB meta data
2014-03-22 15:50:40,894 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:50:40,894 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:40,894 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:50:40,909 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - 
2014-03-22 15:50:40,909 [main] INFO  (DfSchemaXmlSerializer#processTable():422) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2014-03-22 15:50:40,910 [main] INFO  (DfSchemaXmlSerializer#processTable():423) - $ [Table List]
2014-03-22 15:50:40,910 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER(TABLE) // 会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。
2014-03-22 15:50:40,930 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_ADDRESS(TABLE) // 会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。...
2014-03-22 15:50:40,940 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_LOGIN(TABLE) // 会員ログイン: ログインするたびに登録されるログイン履歴。...
2014-03-22 15:50:40,949 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SECURITY(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2014-03-22 15:50:40,956 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SERVICE(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。...
2014-03-22 15:50:40,965 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_STATUS(TABLE) // 会員ステータス: 会員のステータスを示す固定的なマスタテーブル。...
2014-03-22 15:50:40,974 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_WITHDRAWAL(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2014-03-22 15:50:40,987 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT(TABLE) // 商品: 
2014-03-22 15:50:41,028 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_CATEGORY(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2014-03-22 15:50:41,035 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_STATUS(TABLE) // 商品ステータス: 商品のステータスを表現する固定的なマスタ。
2014-03-22 15:50:41,047 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PURCHASE(TABLE) // 購入: 一つの商品に対する購入を表現する。...
2014-03-22 15:50:41,058 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.REGION(TABLE) // 地域: 主に会員の住所に対応する地域。...
2014-03-22 15:50:41,068 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SERVICE_RANK(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2014-03-22 15:50:41,076 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.WITHDRAWAL_REASON(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2014-03-22 15:50:41,081 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_PRODUCT(VIEW)
2014-03-22 15:50:41,087 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_WITHDRAWAL(VIEW)
2014-03-22 15:50:41,092 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 
2014-03-22 15:50:41,093 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ [Table Count]
2014-03-22 15:50:41,093 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - $ 16
2014-03-22 15:50:41,093 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - $ = = = = = = = = = =/
2014-03-22 15:50:41,094 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - 
2014-03-22 15:50:41,095 [main] INFO  (DfSchemaXmlSerializer#processSequence():795) - ...Getting sequences
2014-03-22 15:50:41,123 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():52) - ...Loading sequence informations
2014-03-22 15:50:41,126 [main] INFO  (DfSequenceExtractorBase#selectStringList():75) - select * from INFORMATION_SCHEMA.SEQUENCES where SEQUENCE_SCHEMA in ('PUBLIC')
2014-03-22 15:50:41,129 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():84) - 
[SEQUENCE]
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_33C83D1B_CE8E_48C1_A214_86484C0CAFEB = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_33C83D1B_CE8E_48C1_A214_86484C0CAFEB:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_88C2F2C5_D572_4846_9989_3C71FBF57647 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_88C2F2C5_D572_4846_9989_3C71FBF57647:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_123CBFB5_11D0_47A7_A02E_4D580303CF13 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_123CBFB5_11D0_47A7_A02E_4D580303CF13:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_937F1D20_2DDA_4FD7_9728_5275BC2A22A8 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_937F1D20_2DDA_4FD7_9728_5275BC2A22A8:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_92F6CED2_0907_4774_9A40_C5370FF95F06 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_92F6CED2_0907_4774_9A40_C5370FF95F06:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_B081A898_895F_49B5_8878_2ED3210BDFEF = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_B081A898_895F_49B5_8878_2ED3210BDFEF:{null to null, increment 1}
2014-03-22 15:50:41,129 [main] INFO  (DfSchemaXmlSerializer#processSequence():800) - ...Processing sequences: 6
2014-03-22 15:50:41,151 [main] INFO  (DfSchemaXmlSerializer#serialize():301) - ...Serializing XML:
2014-03-22 15:50:41,152 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   filePath = ./schema/project-schema-exampledb.xml
2014-03-22 15:50:41,152 [main] INFO  (DfSchemaXmlSerializer#serialize():303) -   encoding = UTF-8
2014-03-22 15:50:41,205 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1481) - ...Loading next schema (schema diff process)
2014-03-22 15:50:41,207 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:50:41,280 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1496) -  -> same as previous (schema diff)
2014-03-22 15:50:41,281 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:50:41,297 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s857ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2014-03-22 15:50:41,847 [main] INFO  (TorqueDocumentationTask#begin():173) - +------------------------------------------+
2014-03-22 15:50:41,849 [main] INFO  (TorqueDocumentationTask#begin():174) - |                                          |
2014-03-22 15:50:41,849 [main] INFO  (TorqueDocumentationTask#begin():175) - |                   Doc                    |
2014-03-22 15:50:41,849 [main] INFO  (TorqueDocumentationTask#begin():183) - |                                          |
2014-03-22 15:50:41,849 [main] INFO  (TorqueDocumentationTask#begin():184) - +------------------------------------------+
2014-03-22 15:50:41,878 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:41,879 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:41,879 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:41,879 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:41,881 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():241) - 
2014-03-22 15:50:41,881 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():242) - * * * * * * * * * * *
2014-03-22 15:50:41,881 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():243) - *                   *
2014-03-22 15:50:41,882 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():244) - *    Schema HTML    *
2014-03-22 15:50:41,882 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():245) - *                   *
2014-03-22 15:50:41,882 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - * * * * * * * * * * *
2014-03-22 15:50:41,953 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:50:41,999 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("doc/ControlDocument.vm", c);
2014-03-22 15:50:42,024 [main] INFO  (Database#doEnableDocumentOutputDirectory():1185) - ...Setting up documentOutputDirectory: ./output/doc
2014-03-22 15:50:42,026 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:50:42,027 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:50:42,027 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:50:42,028 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:50:42,028 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:50:42,029 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:50:42,032 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:50:42,032 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:50:42,033 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:50:42,034 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:50:42,034 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:50:42,034 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:42,035 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:50:42,035 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:50:42,039 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:42,040 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:50:42,041 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:50:42,041 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:50:42,041 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:42,042 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:50:42,042 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:50:42,043 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:50:42,050 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:42,324 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:50:42,328 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:50:42,330 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:50:42,331 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:50:42,333 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:50:42,335 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:50:42,656 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():150) - ...Loading schema history
2014-03-22 15:50:42,680 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():154) -  -> found history: count=5
2014-03-22 15:50:42,703 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:50:42,732 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s883ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Doc}
2014-03-22 15:50:44,125 [main] INFO  (TorqueDataModelTask#begin():104) - +------------------------------------------+
2014-03-22 15:50:44,127 [main] INFO  (TorqueDataModelTask#begin():105) - |                                          |
2014-03-22 15:50:44,127 [main] INFO  (TorqueDataModelTask#begin():106) - |                 Generate                 |
2014-03-22 15:50:44,127 [main] INFO  (TorqueDataModelTask#begin():107) - |                                          |
2014-03-22 15:50:44,128 [main] INFO  (TorqueDataModelTask#begin():108) - +------------------------------------------+
2014-03-22 15:50:44,155 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:44,156 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:44,156 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:44,157 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:44,164 [main] INFO  (TorqueDataModelTask#setupControlTemplate():153) - 
2014-03-22 15:50:44,165 [main] INFO  (TorqueDataModelTask#setupControlTemplate():154) - * * * * * * * * *
2014-03-22 15:50:44,165 [main] INFO  (TorqueDataModelTask#setupControlTemplate():155) - * Process Java  *
2014-03-22 15:50:44,165 [main] INFO  (TorqueDataModelTask#setupControlTemplate():156) - * * * * * * * * *
2014-03-22 15:50:44,166 [main] INFO  (TorqueDataModelTask#setupControlTemplate():158) - ...Using Java control: om/ControlGenerateJava.vm
2014-03-22 15:50:44,230 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:50:44,276 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlGenerateJava.vm", c);
2014-03-22 15:50:44,391 [main] INFO  (Database#doEnableGenerateOutputDirectory():1153) - ...Setting up generateOutputDirectory: ../app
2014-03-22 15:50:44,394 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:50:44,394 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:50:44,395 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:50:44,396 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:50:44,397 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:50:44,398 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:50:44,401 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:50:44,401 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:50:44,402 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:50:44,403 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:50:44,403 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:50:44,404 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:44,404 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:50:44,404 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:50:44,409 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:44,410 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:50:44,410 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:50:44,410 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:50:44,411 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:50:44,411 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:50:44,418 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:50:44,418 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:50:44,422 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:44,675 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:50:44,678 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:50:44,679 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:50:44,681 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:50:44,683 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:50:44,685 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:50:44,709 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - /=============================
2014-03-22 15:50:44,709 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():60) - ...Initializing include query.
2014-03-22 15:50:44,710 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - String
2014-03-22 15:50:44,710 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Number
2014-03-22 15:50:44,710 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Date
2014-03-22 15:50:44,710 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotEqual -> []
2014-03-22 15:50:44,711 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   InScope -> []
2014-03-22 15:50:44,711 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotInScope -> []
2014-03-22 15:50:44,711 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():62) - ========/
2014-03-22 15:50:44,722 [main] INFO  (Database#info():2625) - public void parseAllCommon() {
2014-03-22 15:50:44,723 [main] INFO  (Database#info():2625) -     parse('CDef');
2014-03-22 15:50:44,742 [main] INFO  (Database#info():2625) -     parse('DBCurrent');
2014-03-22 15:50:44,745 [main] INFO  (Database#info():2625) -     parse('DBFluteConfig');
2014-03-22 15:50:44,760 [main] INFO  (Database#info():2625) -     parse('DBFluteInitializer');
2014-03-22 15:50:44,763 [main] INFO  (Database#info():2625) -     parse('DBMetaInstanceHandler');
2014-03-22 15:50:44,776 [main] INFO  (Database#info():2625) -     parse('EntityDefinedCommonColumn');
2014-03-22 15:50:44,787 [main] INFO  (Database#info():2625) -     parse('ImplementedBehaviorSelector');
2014-03-22 15:50:44,792 [main] INFO  (Database#info():2625) -     parse('ImplementedCommonColumnAutoSetupper');
2014-03-22 15:50:44,799 [main] INFO  (Database#info():2625) -     parse('ImplementedInvokerAssistant');
2014-03-22 15:50:44,803 [main] INFO  (Database#info():2625) -     parse('ImplementedSqlClauseCreator');
2014-03-22 15:50:44,805 [main] INFO  (Database#info():2625) - }
2014-03-22 15:50:44,806 [main] INFO  (Database#info():2625) - public void parseContainerConfig() {
2014-03-22 15:50:44,806 [main] INFO  (Database#info():2625) -     parse('../conf/dbflute.dicon')
2014-03-22 15:50:44,813 [main] INFO  (Database#info():2625) - }
2014-03-22 15:50:44,817 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldTableClass() {
2014-03-22 15:50:44,833 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:50:44,833 [main] INFO  (Database#info():2625) - public void parseTableClass() {
2014-03-22 15:50:44,834 [main] INFO  (Database#info():2625) -     parse('MEMBER');
2014-03-22 15:50:45,240 [main] INFO  (Database#info():2625) -     parse('MEMBER_ADDRESS');
2014-03-22 15:50:45,468 [main] INFO  (Database#info():2625) -     parse('MEMBER_LOGIN');
2014-03-22 15:50:45,625 [main] INFO  (Database#info():2625) -     parse('MEMBER_SECURITY');
2014-03-22 15:50:45,761 [main] INFO  (Database#info():2625) -     parse('MEMBER_SERVICE');
2014-03-22 15:50:45,974 [main] INFO  (Database#info():2625) -     parse('MEMBER_STATUS');
2014-03-22 15:50:46,103 [main] INFO  (Database#info():2625) -     parse('MEMBER_WITHDRAWAL');
2014-03-22 15:50:46,219 [main] INFO  (Database#info():2625) -     parse('PRODUCT');
2014-03-22 15:50:46,376 [main] INFO  (Database#info():2625) -     parse('PRODUCT_CATEGORY');
2014-03-22 15:50:46,496 [main] INFO  (Database#info():2625) -     parse('PRODUCT_STATUS');
2014-03-22 15:50:46,617 [main] INFO  (Database#info():2625) -     parse('PURCHASE');
2014-03-22 15:50:46,733 [main] INFO  (Database#info():2625) -     parse('REGION');
2014-03-22 15:50:46,889 [main] INFO  (Database#info():2625) -     parse('SERVICE_RANK');
2014-03-22 15:50:47,062 [main] INFO  (Database#info():2625) -     parse('SUMMARY_PRODUCT');
2014-03-22 15:50:47,219 [main] INFO  (Database#info():2625) -     parse('SUMMARY_WITHDRAWAL');
2014-03-22 15:50:47,334 [main] INFO  (Database#info():2625) -     parse('WITHDRAWAL_REASON');
2014-03-22 15:50:47,457 [main] INFO  (Database#info():2625) - }
2014-03-22 15:50:47,457 [main] INFO  (Database#info():2625) -  
2014-03-22 15:50:47,496 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:50:47,510 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s375ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Generate}
2014-03-22 15:50:48,541 [main] INFO  (DfOutsideSqlTestTask#begin():72) - +------------------------------------------+
2014-03-22 15:50:48,543 [main] INFO  (DfOutsideSqlTestTask#begin():73) - |                                          |
2014-03-22 15:50:48,543 [main] INFO  (DfOutsideSqlTestTask#begin():74) - |              OutsideSqlTest              |
2014-03-22 15:50:48,544 [main] INFO  (DfOutsideSqlTestTask#begin():75) - |                                          |
2014-03-22 15:50:48,544 [main] INFO  (DfOutsideSqlTestTask#begin():76) - +------------------------------------------+
2014-03-22 15:50:48,583 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:48,584 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:48,584 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:48,585 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:48,599 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:50:48,605 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s059ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2014-03-22 15:50:49,336 [main] INFO  (DfSql2EntityTask#begin():100) - +------------------------------------------+
2014-03-22 15:50:49,347 [main] INFO  (DfSql2EntityTask#begin():101) - |                                          |
2014-03-22 15:50:49,348 [main] INFO  (DfSql2EntityTask#begin():102) - |                Sql2Entity                |
2014-03-22 15:50:49,348 [main] INFO  (DfSql2EntityTask#begin():103) - |                                          |
2014-03-22 15:50:49,348 [main] INFO  (DfSql2EntityTask#begin():104) - +------------------------------------------+
2014-03-22 15:50:49,399 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:50:49,399 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:50:49,399 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:50:49,399 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:50:49,406 [main] INFO  (DfSql2EntityTask#setupControlTemplate():172) - 
2014-03-22 15:50:49,406 [main] INFO  (DfSql2EntityTask#setupControlTemplate():173) - * * * * * * * * *
2014-03-22 15:50:49,407 [main] INFO  (DfSql2EntityTask#setupControlTemplate():174) - * Process Java  *
2014-03-22 15:50:49,407 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - * * * * * * * * *
2014-03-22 15:50:49,407 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - ...Using Java control: om/ControlSql2EntityJava.vm
2014-03-22 15:50:49,414 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:50:49,496 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:50:49,603 [main] INFO  (DfSql2EntityTask#initControlContext():329) - 
2014-03-22 15:50:49,603 [main] INFO  (DfSql2EntityTask#initControlContext():330) - ...Preparing generation of customize-entities and parameter-beans
2014-03-22 15:50:49,604 [main] INFO  (DfSql2EntityTask#initControlContext():331) - * * * * * * * * * *
2014-03-22 15:50:49,604 [main] INFO  (DfSql2EntityTask#initControlContext():332) - * CustomizeEntity *
2014-03-22 15:50:49,604 [main] INFO  (DfSql2EntityTask#initControlContext():333) - * * * * * * * * * *
2014-03-22 15:50:49,604 [main] INFO  (DfSql2EntityTask#showParameterBean():899) - * * * * * * * * *
2014-03-22 15:50:49,605 [main] INFO  (DfSql2EntityTask#showParameterBean():900) - * ParameterBean *
2014-03-22 15:50:49,605 [main] INFO  (DfSql2EntityTask#showParameterBean():901) - * * * * * * * * *
2014-03-22 15:50:49,615 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlSql2EntityJava.vm", c);
2014-03-22 15:50:49,742 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:50:50,266 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:50:50,270 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:50:50,272 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:50:50,273 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:50:50,274 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:50:50,276 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:50:50,313 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1169) - ...Setting up sql2EntityOutputDirectory: ../app
2014-03-22 15:50:50,319 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldCustomizeClass() {
2014-03-22 15:50:50,327 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:50:50,327 [main] INFO  (Database#info():2625) - public void parseCustomizeEntity() {
2014-03-22 15:50:50,327 [main] INFO  (Database#info():2625) - }
2014-03-22 15:50:50,333 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():321) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2014-03-22 15:50:50,334 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-sastruts-example]
2014-03-22 15:50:50,339 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s001ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.play.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-sastruts-example
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2014-03-22 15:52:22,119 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2014-03-22 15:52:22,121 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2014-03-22 15:52:22,121 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2014-03-22 15:52:22,138 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2014-03-22 15:52:22,139 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2014-03-22 15:52:22,140 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2014-03-22 15:52:22,169 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:22,169 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:22,170 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:22,171 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:22,186 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:52:22,559 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:52:22,560 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:52:22,573 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2014-03-22 15:52:22,573 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2014-03-22 15:52:22,574 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2014-03-22 15:52:22,574 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2014-03-22 15:52:22,574 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2014-03-22 15:52:22,580 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2014-03-22 15:52:22,590 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:52:22,590 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:22,591 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:52:22,617 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table MEMBER_ADDRESS
2014-03-22 15:52:22,618 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table MEMBER_LOGIN
2014-03-22 15:52:22,619 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table MEMBER_SECURITY
2014-03-22 15:52:22,620 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table MEMBER_SERVICE
2014-03-22 15:52:22,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table MEMBER_WITHDRAWAL
2014-03-22 15:52:22,631 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table PURCHASE
2014-03-22 15:52:22,646 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER drop constraint FK_MEMBER_MEMBER_STATUS
2014-03-22 15:52:22,649 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_ADDRESS drop constraint FK_MEMBER_ADDRESS_MEMBER
2014-03-22 15:52:22,650 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_ADDRESS drop constraint FK_MEMBER_ADDRESS_REGION
2014-03-22 15:52:22,653 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_LOGIN drop constraint FK_MEMBER_LOGIN_MEMBER
2014-03-22 15:52:22,654 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_LOGIN drop constraint FK_MEMBER_LOGIN_MEMBER_STATUS
2014-03-22 15:52:22,656 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_SECURITY drop constraint FK_MEMBER_SECURITY_MEMBER
2014-03-22 15:52:22,658 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_SERVICE drop constraint FK_MEMBER_SERVICE_MEMBER
2014-03-22 15:52:22,659 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_SERVICE drop constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2014-03-22 15:52:22,661 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_WITHDRAWAL drop constraint FK_MEMBER_WITHDRAWAL_MEMBER
2014-03-22 15:52:22,662 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table MEMBER_WITHDRAWAL drop constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2014-03-22 15:52:22,663 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table PRODUCT drop constraint FK_PRODUCT_PRODUCT_CATEGORY
2014-03-22 15:52:22,664 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table PRODUCT drop constraint FK_PRODUCT_PRODUCT_STATUS
2014-03-22 15:52:22,666 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table PRODUCT_CATEGORY drop constraint FK_PRODUCT_CATEGORY_PARENT
2014-03-22 15:52:22,668 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table PURCHASE drop constraint FK_PURCHASE_MEMBER
2014-03-22 15:52:22,669 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table PURCHASE drop constraint FK_PURCHASE_PRODUCT
2014-03-22 15:52:22,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop view SUMMARY_PRODUCT
2014-03-22 15:52:22,674 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop view SUMMARY_WITHDRAWAL
2014-03-22 15:52:22,675 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER
2014-03-22 15:52:22,678 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_ADDRESS
2014-03-22 15:52:22,680 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_LOGIN
2014-03-22 15:52:22,682 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_SECURITY
2014-03-22 15:52:22,684 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_SERVICE
2014-03-22 15:52:22,687 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_STATUS
2014-03-22 15:52:22,688 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table MEMBER_WITHDRAWAL
2014-03-22 15:52:22,690 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table PRODUCT
2014-03-22 15:52:22,692 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table PRODUCT_CATEGORY
2014-03-22 15:52:22,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table PRODUCT_STATUS
2014-03-22 15:52:22,696 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table PURCHASE
2014-03-22 15:52:22,700 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table REGION
2014-03-22 15:52:22,702 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table SERVICE_RANK
2014-03-22 15:52:22,703 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table WITHDRAWAL_REASON
2014-03-22 15:52:22,714 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2014-03-22 15:52:22,714 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2014-03-22 15:52:22,715 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2014-03-22 15:52:22,715 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2014-03-22 15:52:22,716 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2014-03-22 15:52:22,716 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2014-03-22 15:52:22,720 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2014-03-22 15:52:22,726 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_NAME VARCHAR(200) NOT NULL,
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL,
    MEMBER_STATUS_CODE CHAR(3) NOT NULL,
    FORMALIZED_DATETIME DATETIME,
    BIRTHDATE DATE,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,729 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    VALID_BEGIN_DATE DATE NOT NULL,
    VALID_END_DATE DATE NOT NULL,
    ADDRESS VARCHAR(200) NOT NULL,
    REGION_ID INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,731 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    LOGIN_DATETIME DATETIME NOT NULL,
    MOBILE_LOGIN_FLG INTEGER NOT NULL,
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL
)
2014-03-22 15:52:22,732 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    LOGIN_PASSWORD VARCHAR(50) NOT NULL,
    REMINDER_QUESTION VARCHAR(50) NOT NULL,
    REMINDER_ANSWER VARCHAR(50) NOT NULL,
    REMINDER_USE_COUNT INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,734 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_SERVICE_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    SERVICE_POINT_COUNT INTEGER NOT NULL,
    SERVICE_RANK_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,736 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_CODE CHAR(3),
    WITHDRAWAL_REASON_INPUT_TEXT TEXT,
    WITHDRAWAL_DATETIME DATETIME NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,737 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    PURCHASE_DATETIME DATETIME NOT NULL,
    PURCHASE_COUNT INTEGER NOT NULL,
    PURCHASE_PRICE INTEGER NOT NULL,
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,740 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL,
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
)
2014-03-22 15:52:22,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL,
    PARENT_CATEGORY_CODE CHAR(3)
)
2014-03-22 15:52:22,744 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:52:22,745 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL PRIMARY KEY,
    REGION_NAME VARCHAR(50) NOT NULL
)
2014-03-22 15:52:22,747 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL PRIMARY KEY,
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL,
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL,
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:52:22,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:52:22,751 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL PRIMARY KEY,
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
)
2014-03-22 15:52:22,753 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:52:22,763 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) references REGION (REGION_ID)
2014-03-22 15:52:22,766 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2014-03-22 15:52:22,767 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,769 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,770 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2014-03-22 15:52:22,772 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,773 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,774 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2014-03-22 15:52:22,776 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID)
2014-03-22 15:52:22,777 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2014-03-22 15:52:22,782 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:52:22,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2014-03-22 15:52:22,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2014-03-22 15:52:22,787 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER add constraint UQ_MEMBER_MEMBER_ACCOUNT UNIQUE (MEMBER_ACCOUNT)
2014-03-22 15:52:22,788 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_ADDRESS add constraint UQ_MEMBER_ADDRESS UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
2014-03-22 15:52:22,789 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_LOGIN add constraint UQ_MEMBER_LOGIN UNIQUE (MEMBER_ID, LOGIN_DATETIME)
2014-03-22 15:52:22,790 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE UNIQUE (MEMBER_ID)
2014-03-22 15:52:22,790 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PURCHASE add constraint UQ_PURCHASE UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:52:22,791 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT add constraint UQ_PRODUCT_PRODUCT_HANDLE_CODE UNIQUE (PRODUCT_HANDLE_CODE)
2014-03-22 15:52:22,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_STATUS add constraint UQ_MEMBER_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:52:22,793 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint UQ_PRODUCT_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:52:22,793 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table SERVICE_RANK add constraint UQ_SERVICE_RANK_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:52:22,794 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table WITHDRAWAL_REASON add constraint UQ_WITHDRAWAL_REASON_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER)
2014-03-22 15:52:22,795 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2014-03-22 15:52:22,796 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2014-03-22 15:52:22,796 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2014-03-22 15:52:22,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2014-03-22 15:52:22,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2014-03-22 15:52:22,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2014-03-22 15:52:22,799 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2014-03-22 15:52:22,799 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2014-03-22 15:52:22,800 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=47 failure=0
2014-03-22 15:52:22,801 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-20-view.sql
2014-03-22 15:52:22,802 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is defined at DBFlute property
create view SUMMARY_PRODUCT as
select product.PRODUCT_ID
     , product.PRODUCT_NAME
     , product.PRODUCT_HANDLE_CODE
     , product.PRODUCT_STATUS_CODE
     , (select max(purchase.PURCHASE_DATETIME)
          from PURCHASE purchase
         where purchase.PRODUCT_ID = product.PRODUCT_ID
       ) as LATEST_PURCHASE_DATETIME
  from PRODUCT product
2014-03-22 15:52:22,804 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PK is NOT defined at DBFlute property
-- treated as no-primary-key table 
create view SUMMARY_WITHDRAWAL as
select withdrawal.MEMBER_ID
     , member.MEMBER_NAME
     , withdrawal.WITHDRAWAL_REASON_CODE
     , reason.WITHDRAWAL_REASON_TEXT
     , withdrawal.WITHDRAWAL_REASON_INPUT_TEXT
     , withdrawal.WITHDRAWAL_DATETIME
     , member.MEMBER_STATUS_CODE
     , status.MEMBER_STATUS_NAME
     , (select max(purchase.PURCHASE_PRICE)
          from PURCHASE purchase
         where purchase.MEMBER_ID = member.MEMBER_ID
       ) as MAX_PURCHASE_PRICE
  from MEMBER_WITHDRAWAL withdrawal
    left outer join WITHDRAWAL_REASON reason
      on withdrawal.WITHDRAWAL_REASON_CODE = reason.WITHDRAWAL_REASON_CODE
    left outer join MEMBER member
      on withdrawal.MEMBER_ID = member.MEMBER_ID
    left outer join MEMBER_STATUS status
      on member.MEMBER_STATUS_CODE = status.MEMBER_STATUS_CODE
2014-03-22 15:52:22,807 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2014-03-22 15:52:22,808 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-80-comment.sql
2014-03-22 15:52:22,813 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER
comment on table MEMBER is '会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。'
2014-03-22 15:52:22,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ID is '会員ID: 会員を識別するID。連番として自動採番される。
（会員IDだけに限らず）採番方法はDBMS次第。'
2014-03-22 15:52:22,817 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_NAME is '会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することも多いが、ここでは Example なので単純にひとまとめ。'
2014-03-22 15:52:22,818 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_ACCOUNT is '会員アカウント: 会員がログイン時に利用するアカウントNO。
昨今、メールアドレスをログインIDとすることが多いので、あまり見かけなくないかも。'
2014-03-22 15:52:22,819 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。'
2014-03-22 15:52:22,821 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.FORMALIZED_DATETIME is '正式会員日時: 会員が正式に確定した日時。
一度確定したら更新されない。'
2014-03-22 15:52:22,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER.BIRTHDATE is '生年月日: 必須項目ではないので、このデータがない会員もいる。'
2014-03-22 15:52:22,832 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_DATETIME is '登録日時: レコードが登録された日時。
会員が登録された日時とほぼ等しいが、そういった業務的な役割を兼務させるのはあまり推奨されない。
どのテーブルでも同じなので、共通カラムの説明はこのテーブルでしか書かない。'
2014-03-22 15:52:22,834 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.REGISTER_USER is '登録ユーザ: レコードを登録したユーザ。
会員テーブルであれば当然、会員自身であるはずだが、他のテーブルの場合では管理画面から運用者による登録など考えられるので、しっかり保持しておく。'
2014-03-22 15:52:22,835 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_DATETIME is '更新日時: レコードが（最後に）更新された日時。
業務的な利用はあまり推奨されないと別項目で説明したが、このカラムはソートの要素としてよく利用される。'
2014-03-22 15:52:22,836 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.UPDATE_USER is '更新ユーザ: レコードを更新したユーザ。
システムは誰が何をしたのかちゃんと覚えている。'
2014-03-22 15:52:22,838 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER.VERSION_NO is 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。'
2014-03-22 15:52:22,848 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_ADDRESS
comment on table MEMBER_ADDRESS is '会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的にはone-to-many だが、業務的な定型条件でone-to-one になる。このような構造を「業務的one-to-one」と呼ぶ。
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) "1 : 0...1" である。'
2014-03-22 15:52:22,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ADDRESS_ID is '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。'
2014-03-22 15:52:22,850 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.MEMBER_ID is '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。
有効開始日と合わせて複合ユニーク制約となるが、
厳密には完全な制約にはなっていない。
有効期間の概念はRDBでは表現しきれないのである。'
2014-03-22 15:52:22,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_BEGIN_DATE is '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。'
2014-03-22 15:52:22,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.VALID_END_DATE is '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。'
2014-03-22 15:52:22,854 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_ADDRESS.ADDRESS is '住所: まるごと住所'
2014-03-22 15:52:22,855 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_ADDRESS.REGION_ID is '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。
（業務的one-to-oneの親テーブルの表現したかっ...）'
2014-03-22 15:52:22,856 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SECURITY
comment on table MEMBER_SECURITY is '会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2014-03-22 15:52:22,857 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.MEMBER_ID is '会員ID: そのまま one-to-one を構成するためのFKとなる。'
2014-03-22 15:52:22,858 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.LOGIN_PASSWORD is 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。'
2014-03-22 15:52:22,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_QUESTION is 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。'
2014-03-22 15:52:22,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SECURITY.REMINDER_ANSWER is 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。'
2014-03-22 15:52:22,861 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SECURITY.REMINDER_USE_COUNT is 'リマインダ利用回数: リマインダを利用した回数。
多いと忘れっぽい会員と言えるが、
そんなことを知ってもしょうがない。'
2014-03-22 15:52:22,862 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_SERVICE
comment on table MEMBER_SERVICE is '会員サービス: 会員のサービス情報（ポイントサービスなど）。
ExampleDBとして、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。'
2014-03-22 15:52:22,863 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_SERVICE_ID is '会員サービスID: 独立した主キーとなるが、実質的に会員IDとは one-to-one である。'
2014-03-22 15:52:22,864 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_SERVICE.MEMBER_ID is '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。'
2014-03-22 15:52:22,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_POINT_COUNT is 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。'
2014-03-22 15:52:22,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_SERVICE.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。'
2014-03-22 15:52:22,866 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_WITHDRAWAL
comment on table MEMBER_WITHDRAWAL is '会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。（"1 : 0...1" のパターンの one-to-one）
共通カラムがあってバージョンNOがないパターン。基本的に更新が入ることはないが、登録ユーザを保持したいのと、重要なデータなので更新系の情報も。'
2014-03-22 15:52:22,867 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_CODE is '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。'
2014-03-22 15:52:22,868 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_REASON_INPUT_TEXT is '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。
サイト運営側としては真摯に受け止めて改善していきたい。'
2014-03-22 15:52:22,869 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_WITHDRAWAL.WITHDRAWAL_DATETIME is '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。'
2014-03-22 15:52:22,870 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_LOGIN
comment on table MEMBER_LOGIN is '会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには登録する人もプログラムもはっきりしているので、ここでは共通カラムは(紙面の都合上もあって)省略している。'
2014-03-22 15:52:22,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_LOGIN_ID is '会員ログインID: '
2014-03-22 15:52:22,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MEMBER_ID is '会員ID: '
2014-03-22 15:52:22,872 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_DATETIME is 'ログイン日時: ログインした瞬間の日時。'
2014-03-22 15:52:22,873 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.MOBILE_LOGIN_FLG is 'モバイルログインフラグ: モバイル機器からのログインか否か。'
2014-03-22 15:52:22,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_LOGIN.LOGIN_MEMBER_STATUS_CODE is 'ログイン会員ステータスコード: ログイン時の会員ステータス'
2014-03-22 15:52:22,877 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PURCHASE
comment on table PURCHASE is '購入: 一つの商品に対する購入を表現する。
実業務であれば購入詳細というテーブルを作り、「購入という行為」と「その中身（詳細）」を違う粒度のデータとしてそれぞれ管理するのが一般的と言えるでしょう。というか、注文とか請求とかそういうことを考え始めたらもっと複雑になるはずですが、ExampleDBということで割り切っています。'
2014-03-22 15:52:22,879 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.MEMBER_ID is '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。'
2014-03-22 15:52:22,880 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PRODUCT_ID is '商品ID: 商品を参照するID。'
2014-03-22 15:52:22,881 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_DATETIME is '購入日時: 購入した瞬間の日時。'
2014-03-22 15:52:22,882 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PURCHASE_COUNT is '購入数量: 購入した商品の（一回の購入における）数量。'
2014-03-22 15:52:22,883 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PURCHASE.PURCHASE_PRICE is '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。'
2014-03-22 15:52:22,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PURCHASE.PAYMENT_COMPLETE_FLG is '支払完了フラグ: この購入に関しての支払いが完了しているか否か。'
2014-03-22 15:52:22,886 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT
comment on table PRODUCT is '商品: '
2014-03-22 15:52:22,888 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column PRODUCT.PRODUCT_NAME is '商品名称: ExampleDBとして、コメントの少ないケースを表現するため、
あえてコメントを控えている。実業務ではしっかりとコメントを
入れることが強く強く推奨される。'
2014-03-22 15:52:22,889 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT.PRODUCT_HANDLE_CODE is '商品ハンドルコード: 商品を識別する業務上のコード。'
2014-03-22 15:52:22,890 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- MEMBER_STATUS
comment on table MEMBER_STATUS is '会員ステータス: 会員のステータスを示す固定的なマスタテーブル。
業務で増えることはなく、増減するときは実装もともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるという
ところで割り切っている。実業務では統一的に定義することもある。'
2014-03-22 15:52:22,892 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.MEMBER_STATUS_CODE is '会員ステータスコード: 会員ステータスを識別するコード。
固定的なデータなので、連番とか番号にはせず、
データを直接見たときも人が直感的にわかるように、
このような３桁のコード形式にしている。
'
2014-03-22 15:52:22,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column MEMBER_STATUS.MEMBER_STATUS_NAME is '会員ステータス名称: '
2014-03-22 15:52:22,894 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DESCRIPTION is '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。'
2014-03-22 15:52:22,895 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column MEMBER_STATUS.DISPLAY_ORDER is '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。'
2014-03-22 15:52:22,896 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- SERVICE_RANK
comment on table SERVICE_RANK is 'サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2014-03-22 15:52:22,904 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.SERVICE_RANK_CODE is 'サービスランクコード: サービスランクを識別するコード。'
2014-03-22 15:52:22,905 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_RANK_NAME is 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）'
2014-03-22 15:52:22,906 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column SERVICE_RANK.SERVICE_POINT_INCIDENCE is 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。
ExampleDBとして数少ない貴重な小数点ありのカラム。'
2014-03-22 15:52:22,907 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.NEW_ACCEPTABLE_FLG is '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。'
2014-03-22 15:52:22,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DESCRIPTION is '説明: ランクに関する業務的な説明。'
2014-03-22 15:52:22,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column SERVICE_RANK.DISPLAY_ORDER is '表示順: UI上の表示順を表現する番号。'
2014-03-22 15:52:22,909 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_CATEGORY
comment on table PRODUCT_CATEGORY is '商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2014-03-22 15:52:22,910 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_CODE is '商品カテゴリコード: '
2014-03-22 15:52:22,911 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PRODUCT_CATEGORY_NAME is '商品カテゴリ名称: '
2014-03-22 15:52:22,912 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_CATEGORY.PARENT_CATEGORY_CODE is '親カテゴリコード: 最上位の場合はデータなし。'
2014-03-22 15:52:22,912 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- PRODUCT_STATUS
comment on table PRODUCT_STATUS is '商品ステータス: 商品のステータスを表現する固定的なマスタ。'
2014-03-22 15:52:22,919 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column PRODUCT_STATUS.PRODUCT_STATUS_CODE is '商品ステータスコード: 商品ステータスを識別するコード。'
2014-03-22 15:52:22,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- REGION
comment on table REGION is '地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。
業務的one-to-oneの親テーブル。'
2014-03-22 15:52:22,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column REGION.REGION_ID is '地域ID: 地域を識別するID。
珍しく(固定的な)マスタテーブルとしては数値だが、
Exampleなのでやはり色々なパターンがないと。'
2014-03-22 15:52:22,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column REGION.REGION_NAME is '地域名称: 地域を表す名称。'
2014-03-22 15:52:22,923 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- WITHDRAWAL_REASON
comment on table WITHDRAWAL_REASON is '退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2014-03-22 15:52:22,924 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_CODE is '退会理由コード: '
2014-03-22 15:52:22,924 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
comment on column WITHDRAWAL_REASON.WITHDRAWAL_REASON_TEXT is '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。'
2014-03-22 15:52:22,925 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=74 failure=0
2014-03-22 15:52:22,926 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=123 failure=0 (in 3 files)
2014-03-22 15:52:22,954 [main] INFO  (DfLoadDataProcess#execute():129) - 
2014-03-22 15:52:22,954 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2014-03-22 15:52:22,955 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2014-03-22 15:52:22,955 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2014-03-22 15:52:22,955 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2014-03-22 15:52:22,956 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2014-03-22 15:52:22,977 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:52:22,978 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/common/xls/10-master.xls)
2014-03-22 15:52:22,978 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:52:23,216 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:52:23,216 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:23,217 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:52:23,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2014-03-22 15:52:23,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2014-03-22 15:52:23,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2014-03-22 15:52:23,253 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to MEMBER_STATUS
2014-03-22 15:52:23,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{1, アメリカ}
2014-03-22 15:52:23,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{2, カナダ}
2014-03-22 15:52:23,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{3, 中国}
2014-03-22 15:52:23,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - REGION:{4, 千葉}
2014-03-22 15:52:23,256 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to REGION
2014-03-22 15:52:23,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2014-03-22 15:52:23,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2014-03-22 15:52:23,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2014-03-22 15:52:23,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2014-03-22 15:52:23,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2014-03-22 15:52:23,260 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to SERVICE_RANK
2014-03-22 15:52:23,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2014-03-22 15:52:23,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2014-03-22 15:52:23,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2014-03-22 15:52:23,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2014-03-22 15:52:23,266 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2014-03-22 15:52:23,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2014-03-22 15:52:23,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{FOD, 食品, null}
2014-03-22 15:52:23,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2014-03-22 15:52:23,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2014-03-22 15:52:23,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2014-03-22 15:52:23,269 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2014-03-22 15:52:23,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2014-03-22 15:52:23,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{PST, 生産中止, 2}
2014-03-22 15:52:23,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT_STATUS:{SST, 販売中止, 3}
2014-03-22 15:52:23,271 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 3 rows are loaded to PRODUCT_STATUS
2014-03-22 15:52:23,273 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2014-03-22 15:52:23,273 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql/data/ut/reversexls/cyclic-data-01-MEMBER-plus.xls)
2014-03-22 15:52:23,273 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2014-03-22 15:52:23,417 [main] INFO  (DfLoadingControlProp#analyzeLoadingControlMap():470) - ...Analyzing loadingControlMap:
2014-03-22 15:52:23,419 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():549) - map:{
2014-03-22 15:52:23,420 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     loggingInsertType = PART
2014-03-22 15:52:23,420 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressBatchUpdate = false
2014-03-22 15:52:23,420 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():562) -     isSuppressColumnDefCheck = false
2014-03-22 15:52:23,421 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():552) -     dateAdjustmentMap = map:{
2014-03-22 15:52:23,421 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceYears = 1
2014-03-22 15:52:23,421 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceMonths = 11
2014-03-22 15:52:23,422 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:distanceDays = 339
2014-03-22 15:52:23,422 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         df:originDate = 2013/04/17
2014-03-22 15:52:23,423 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         $$ALL$$ = {$$ALL$$=addDay($distance), FORMALIZED_DATETIME=addDay(0), LOGIN_DATETIME=addDay(0)}
2014-03-22 15:52:23,423 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER = {BIRTHDATE=addDay(0)}
2014-03-22 15:52:23,423 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         MEMBER_ADDRESS = {$$ALL$$=addDay(0)}
2014-03-22 15:52:23,424 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():557) -         WHITE_XLS_MAN = {$$ALL$$=addDay(0)}
2014-03-22 15:52:23,424 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():559) -     }
2014-03-22 15:52:23,424 [main] INFO  (DfLoadingControlProp#showLoadingControlMap():565) - }
2014-03-22 15:52:23,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10.000, 1965/03/03 00:00:00.000, 2013/12/28 13:43:53.816, foo, 2013/12/28 13:43:53.816, foo, 0}
2014-03-22 15:52:23,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15 00:00:00.000, 2013/12/28 13:43:53.823, foo, 2013/12/28 13:43:53.823, foo, 0}
2014-03-22 15:52:23,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30.000, null, 2013/12/28 13:43:53.825, foo, 2013/12/28 13:43:53.825, foo, 0}
2014-03-22 15:52:23,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40.000, 1978/09/11 00:00:00.000, 2013/12/28 13:43:53.828, foo, 2013/12/28 13:43:53.828, foo, 0}
2014-03-22 15:52:23,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50.000, null, 2013/12/28 13:43:53.830, foo, 2013/12/28 13:43:53.830, foo, 0}
2014-03-22 15:52:23,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40.000, 1969/02/20 00:00:00.000, 2013/12/28 13:43:53.832, foo, 2013/12/28 13:43:53.832, foo, 0}
2014-03-22 15:52:23,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30.000, null, 2013/12/28 13:43:53.836, foo, 2013/12/28 13:43:53.836, foo, 0}
2014-03-22 15:52:23,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20.000, null, 2013/12/28 13:43:53.838, foo, 2013/12/28 13:43:53.838, foo, 0}
2014-03-22 15:52:23,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00.000, 1967/02/20 00:00:00.000, 2013/12/28 13:43:53.841, foo, 2013/12/28 13:43:53.841, foo, 0}
2014-03-22 15:52:23,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2013/12/28 13:43:53.844, foo, 2013/12/28 13:43:53.844, foo, 0}
2014-03-22 15:52:23,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER:{... more several records}
2014-03-22 15:52:23,545 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER
2014-03-22 15:52:23,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{1, 1, 2007/03/24 00:00:00.000, 2015/12/31 00:00:00.000, Nagara, 4, 2013/01/23 13:43:53.954, foo, 2013/01/23 13:43:53.954, foo, 0}
2014-03-22 15:52:23,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{2, 1, 1949/01/01 00:00:00.000, 1997/03/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.958, foo, 2013/01/23 13:43:53.958, foo, 0}
2014-03-22 15:52:23,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{3, 1, 1997/04/01 00:00:00.000, 2000/09/30 00:00:00.000, Los Angels, 1, 2013/01/23 13:43:53.960, foo, 2013/01/23 13:43:53.960, foo, 0}
2014-03-22 15:52:23,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{4, 1, 2000/10/01 00:00:00.000, 2003/08/31 00:00:00.000, New York, 1, 2013/01/23 13:43:53.963, foo, 2013/01/23 13:43:53.963, foo, 0}
2014-03-22 15:52:23,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{5, 1, 2003/09/01 00:00:00.000, 2004/12/22 00:00:00.000, San Francisco Powell, 1, 2013/01/23 13:43:53.965, foo, 2013/01/23 13:43:53.965, foo, 0}
2014-03-22 15:52:23,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{6, 1, 2004/12/23 00:00:00.000, 2006/03/23 00:00:00.000, San Francisco Daly City, 1, 2013/01/23 13:43:53.968, foo, 2013/01/23 13:43:53.968, foo, 0}
2014-03-22 15:52:23,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{7, 1, 2016/01/01 00:00:00.000, 9999/12/31 00:00:00.000, Victoria, 2, 2013/01/23 13:43:53.970, foo, 2013/01/23 13:43:53.970, foo, 0}
2014-03-22 15:52:23,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{8, 2, 2004/12/24 00:00:00.000, 9999/12/31 00:00:00.000, Ichihara, 4, 2013/01/23 13:43:53.973, foo, 2013/01/23 13:43:53.973, foo, 0}
2014-03-22 15:52:23,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{9, 3, 2004/12/24 00:00:00.000, 2007/03/23 00:00:00.000, Mobara, 4, 2013/01/23 13:43:53.975, foo, 2013/01/23 13:43:53.975, foo, 0}
2014-03-22 15:52:23,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_ADDRESS:{10, 4, 2002/11/01 00:00:00.000, 9999/12/31 00:00:00.000, Sousa, 4, 2013/01/23 13:43:53.977, foo, 2013/01/23 13:43:53.977, foo, 0}
2014-03-22 15:52:23,587 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_ADDRESS:{... more several records}
2014-03-22 15:52:23,643 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_ADDRESS
2014-03-22 15:52:23,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59.000, 0, FML}
2014-03-22 15:52:23,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16.000, 0, FML}
2014-03-22 15:52:23,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29.000, 0, FML}
2014-03-22 15:52:23,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00.000, 0, FML}
2014-03-22 15:52:23,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59.000, 0, FML}
2014-03-22 15:52:23,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01.000, 0, PRV}
2014-03-22 15:52:23,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59.000, 1, FML}
2014-03-22 15:52:23,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00.000, 0, FML}
2014-03-22 15:52:23,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59.000, 0, FML}
2014-03-22 15:52:23,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00.000, 0, FML}
2014-03-22 15:52:23,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_LOGIN:{... more several records}
2014-03-22 15:52:23,718 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 56 rows are loaded to MEMBER_LOGIN
2014-03-22 15:52:23,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 0, 2013/12/28 13:43:54.206, foo, 2013/12/28 13:43:54.206, foo, 0}
2014-03-22 15:52:23,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2013/12/28 13:43:54.208, foo, 2013/12/28 13:43:54.208, foo, 0}
2014-03-22 15:52:23,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2013/12/28 13:43:54.209, foo, 2013/12/28 13:43:54.209, foo, 0}
2014-03-22 15:52:23,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 12, 2013/12/28 13:43:54.211, foo, 2013/12/28 13:43:54.211, foo, 0}
2014-03-22 15:52:23,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 410, 2013/12/28 13:43:54.212, foo, 2013/12/28 13:43:54.212, foo, 0}
2014-03-22 15:52:23,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2, 2013/12/28 13:43:54.213, foo, 2013/12/28 13:43:54.213, foo, 0}
2014-03-22 15:52:23,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 4, 2013/12/28 13:43:54.214, foo, 2013/12/28 13:43:54.214, foo, 0}
2014-03-22 15:52:23,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 9, 2013/12/28 13:43:54.215, foo, 2013/12/28 13:43:54.215, foo, 0}
2014-03-22 15:52:23,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 25, 2013/12/28 13:43:54.216, foo, 2013/12/28 13:43:54.216, foo, 0}
2014-03-22 15:52:23,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 8, 2013/12/28 13:43:54.217, foo, 2013/12/28 13:43:54.217, foo, 0}
2014-03-22 15:52:23,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SECURITY:{... more several records}
2014-03-22 15:52:23,762 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SECURITY
2014-03-22 15:52:23,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2013/12/28 13:43:54.233, foo, 2013/12/28 13:43:54.233, foo, 0}
2014-03-22 15:52:23,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2013/12/28 13:43:54.234, foo, 2013/12/28 13:43:54.234, foo, 0}
2014-03-22 15:52:23,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2013/12/28 13:43:54.235, foo, 2013/12/28 13:43:54.235, foo, 0}
2014-03-22 15:52:23,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2013/12/28 13:43:54.236, foo, 2013/12/28 13:43:54.236, foo, 0}
2014-03-22 15:52:23,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2013/12/28 13:43:54.237, foo, 2013/12/28 13:43:54.238, foo, 0}
2014-03-22 15:52:23,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2013/12/28 13:43:54.239, foo, 2013/12/28 13:43:54.239, foo, 0}
2014-03-22 15:52:23,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2013/12/28 13:43:54.240, foo, 2013/12/28 13:43:54.240, foo, 0}
2014-03-22 15:52:23,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{8, 8, 234, SIL, 2013/12/28 13:43:54.241, foo, 2013/12/28 13:43:54.241, foo, 0}
2014-03-22 15:52:23,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{9, 9, 3, SIL, 2013/12/28 13:43:54.243, foo, 2013/12/28 13:43:54.243, foo, 0}
2014-03-22 15:52:23,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2013/12/28 13:43:54.244, foo, 2013/12/28 13:43:54.244, foo, 0}
2014-03-22 15:52:23,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - MEMBER_SERVICE:{... more several records}
2014-03-22 15:52:23,809 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to MEMBER_SERVICE
2014-03-22 15:52:23,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2007/11/28 23:59:59.123, 2013/12/28 13:43:54.269, foo, 2013/12/28 13:43:54.269, foo, 0}
2014-03-22 15:52:23,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{6, SIT, null, 2008/10/15 16:00:00.456, 2013/12/28 13:43:54.271, foo, 2013/12/28 13:43:54.271, foo, 0}
2014-03-22 15:52:23,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2007/11/28 05:52:29.789, 2013/12/28 13:43:54.273, foo, 2013/12/28 13:43:54.273, foo, 0}
2014-03-22 15:52:23,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2008/10/17 16:00:00.456, 2013/12/28 13:43:54.275, foo, 2013/12/28 13:43:54.275, foo, 0}
2014-03-22 15:52:23,818 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2014-03-22 15:52:23,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2013/12/28 13:43:54.363, foo, 2013/12/28 13:43:54.363, foo, 0}
2014-03-22 15:52:23,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2013/12/28 13:43:54.365, foo, 2013/12/28 13:43:54.365, foo, 0}
2014-03-22 15:52:23,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2013/12/28 13:43:54.366, foo, 2013/12/28 13:43:54.366, foo, 0}
2014-03-22 15:52:23,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2013/12/28 13:43:54.368, foo, 2013/12/28 13:43:54.368, foo, 0}
2014-03-22 15:52:23,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2013/12/28 13:43:54.369, foo, 2013/12/28 13:43:54.369, foo, 0}
2014-03-22 15:52:23,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2013/12/28 13:43:54.370, foo, 2013/12/28 13:43:54.370, foo, 0}
2014-03-22 15:52:23,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2013/12/28 13:43:54.371, foo, 2013/12/28 13:43:54.371, foo, 0}
2014-03-22 15:52:23,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2013/12/28 13:43:54.372, foo, 2013/12/28 13:43:54.372, foo, 0}
2014-03-22 15:52:23,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2013/12/28 13:43:54.374, foo, 2013/12/28 13:43:54.374, foo, 0}
2014-03-22 15:52:23,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2013/12/28 13:43:54.375, foo, 2013/12/28 13:43:54.375, foo, 0}
2014-03-22 15:52:23,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PRODUCT:{... more several records}
2014-03-22 15:52:23,847 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 20 rows are loaded to PRODUCT
2014-03-22 15:52:23,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{1, 5, 3, 2007/11/28 23:59:59.000, 1, 1800, 1, 2013/12/28 13:43:54.401, foo, 2013/12/28 13:43:54.401, foo, 0}
2014-03-22 15:52:23,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{2, 15, 7, 2008/10/15 16:16:16.000, 1, 1700, 1, 2013/12/28 13:43:54.408, foo, 2013/12/28 13:43:54.408, foo, 0}
2014-03-22 15:52:23,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{3, 13, 3, 2007/11/27 22:56:29.235, 1, 1800, 1, 2013/12/28 13:43:54.410, foo, 2013/12/28 13:43:54.410, foo, 0}
2014-03-22 15:52:23,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{4, 2, 5, 2008/10/05 02:13:00.000, 2, 1700, 1, 2013/12/28 13:43:54.411, foo, 2013/12/28 13:43:54.411, foo, 0}
2014-03-22 15:52:23,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{5, 9, 11, 2008/12/08 23:12:59.000, 5, 1800, 1, 2013/12/28 13:43:54.413, foo, 2013/12/28 13:43:54.413, foo, 0}
2014-03-22 15:52:23,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{6, 20, 2, 2002/12/06 16:32:01.000, 1, 2000, 1, 2013/12/28 13:43:54.415, foo, 2013/12/28 13:43:54.415, foo, 0}
2014-03-22 15:52:23,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{7, 19, 9, 2007/01/02 23:59:59.999, 1, 1000, 0, 2013/12/28 13:43:54.417, foo, 2013/12/28 13:43:54.417, foo, 0}
2014-03-22 15:52:23,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{8, 4, 7, 2008/10/13 16:23:00.000, 1, 1535, 1, 2013/12/28 13:43:54.418, foo, 2013/12/28 13:43:54.418, foo, 0}
2014-03-22 15:52:23,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{9, 4, 10, 2007/11/26 23:59:59.000, 20, 1700, 1, 2013/12/28 13:43:54.420, foo, 2013/12/28 13:43:54.420, foo, 0}
2014-03-22 15:52:23,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1041) - PURCHASE:{10, 2, 10, 2008/10/05 02:13:00.345, 1, 1700, 0, 2013/12/28 13:43:54.422, foo, 2013/12/28 13:43:54.422, foo, 0}
2014-03-22 15:52:23,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1036) - PURCHASE:{... more several records}
2014-03-22 15:52:23,981 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1057) -  -> 60 rows are loaded to PURCHASE
2014-03-22 15:52:23,982 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2014-03-22 15:52:23,992 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:23,994 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:52:23,996 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:52:23,998 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:52:23,999 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:52:24,000 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:52:24,003 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:52:24,008 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:52:24,011 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2014-03-22 15:52:24,013 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2014-03-22 15:52:24,017 [main] INFO  (DfImplicitClassificationChecker#check():53) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2014-03-22 15:52:24,024 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2014-03-22 15:52:24,024 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2014-03-22 15:52:24,025 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2014-03-22 15:52:24,025 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2014-03-22 15:52:24,025 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2014-03-22 15:52:24,026 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2014-03-22 15:52:24,030 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2014-03-22 15:52:24,031 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     Business Constraint
--                                                                     ===================
-- #df:assertCountZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Formalized members should have their own formalized date-times.
-- - - - - - - - - - -/
select count(*)
  from MEMBER
 where MEMBER_STATUS_CODE = 'FML'
   and FORMALIZED_DATETIME is null
2014-03-22 15:52:24,035 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Withdrawal members should have their own withdrawal informations.
-- - - - - - - - - - -/
select member.MEMBER_ID, member.MEMBER_NAME
  from MEMBER member
 where member.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select withdrawal.MEMBER_ID
                     from MEMBER_WITHDRAWAL withdrawal
                    where withdrawal.MEMBER_ID = member.MEMBER_ID
       )
2014-03-22 15:52:24,037 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  and subadr.VALID_BEGIN_DATE < adr.VALID_END_DATE
       )
2014-03-22 15:52:24,040 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- =======================================================================================
--                                                                     TestData Constraint
--                                                                     ===================
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- These tables should have at least one record at ut and should not have at real.
-- - - - - - - - - - -/
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER member
2014-03-22 15:52:24,041 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=20
2014-03-22 15:52:24,041 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertCountExists@ut#
-- #df:assertCountZero@real#
select count(*) from MEMBER_LOGIN login
2014-03-22 15:52:24,042 [main] INFO  (DfDataAssertProvider#assertCount():187) - [RESULT]: count=56
2014-03-22 15:52:24,042 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=5 failure=0
2014-03-22 15:52:24,043 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=5 failure=0 (in 1 files)
2014-03-22 15:52:24,044 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:52:24,065 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s946ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example

 {Create Schema}: success=123 failure=0 (in 3 files)
  o replace-schema-10-basic.sql
  o replace-schema-20-view.sql
  o replace-schema-80-comment.sql

 {Load Data}: loaded-files=2
  (common)
  o 10-master.xls
  (ut)
  o cyclic-data-01-MEMBER-plus.xls

 {Take Finally}: success=5 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2014-03-22 15:52:24,542 [main] INFO  (TorqueJDBCTransformTask#begin():100) - +------------------------------------------+
2014-03-22 15:52:24,543 [main] INFO  (TorqueJDBCTransformTask#begin():101) - |                                          |
2014-03-22 15:52:24,544 [main] INFO  (TorqueJDBCTransformTask#begin():102) - |                   JDBC                   |
2014-03-22 15:52:24,544 [main] INFO  (TorqueJDBCTransformTask#begin():103) - |                                          |
2014-03-22 15:52:24,544 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2014-03-22 15:52:24,564 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:24,565 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:24,565 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:24,565 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:24,601 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - 
2014-03-22 15:52:24,601 [main] INFO  (DfSchemaXmlSerializer#serialize():287) - ...Starting to process JDBC to SchemaXML
2014-03-22 15:52:24,602 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1463) - ...Loading previous schema (schema diff process)
2014-03-22 15:52:24,609 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:52:24,692 [main] INFO  (DfSchemaXmlSerializer#generateXML():361) - ...Getting DB connection
2014-03-22 15:52:24,693 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2014-03-22 15:52:24,965 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = H2 1.3.173 (2013-07-28)
2014-03-22 15:52:24,965 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = H2 JDBC Driver 1.3.173 (2013-07-28) for JDBC 4.0
2014-03-22 15:52:24,966 [main] INFO  (DfSchemaXmlSerializer#generateXML():364) - ...Getting DB meta data
2014-03-22 15:52:24,967 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2014-03-22 15:52:24,967 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:24,968 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2014-03-22 15:52:24,983 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - 
2014-03-22 15:52:24,984 [main] INFO  (DfSchemaXmlSerializer#processTable():422) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2014-03-22 15:52:24,984 [main] INFO  (DfSchemaXmlSerializer#processTable():423) - $ [Table List]
2014-03-22 15:52:24,984 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER(TABLE) // 会員: 会員登録時にデータが登録される。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員それぞれの詳細情報は、別途 one-to-one のテーブルに。
2014-03-22 15:52:25,013 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_ADDRESS(TABLE) // 会員住所情報: 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。...
2014-03-22 15:52:25,024 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_LOGIN(TABLE) // 会員ログイン: ログインするたびに登録されるログイン履歴。...
2014-03-22 15:52:25,036 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SECURITY(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2014-03-22 15:52:25,044 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_SERVICE(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。...
2014-03-22 15:52:25,055 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_STATUS(TABLE) // 会員ステータス: 会員のステータスを示す固定的なマスタテーブル。...
2014-03-22 15:52:25,066 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.MEMBER_WITHDRAWAL(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2014-03-22 15:52:25,075 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT(TABLE) // 商品: 
2014-03-22 15:52:25,096 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_CATEGORY(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2014-03-22 15:52:25,104 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PRODUCT_STATUS(TABLE) // 商品ステータス: 商品のステータスを表現する固定的なマスタ。
2014-03-22 15:52:25,117 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.PURCHASE(TABLE) // 購入: 一つの商品に対する購入を表現する。...
2014-03-22 15:52:25,127 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.REGION(TABLE) // 地域: 主に会員の住所に対応する地域。...
2014-03-22 15:52:25,133 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SERVICE_RANK(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2014-03-22 15:52:25,143 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.WITHDRAWAL_REASON(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2014-03-22 15:52:25,149 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_PRODUCT(VIEW)
2014-03-22 15:52:25,162 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():506) - $ EXAMPLEDB.PUBLIC.SUMMARY_WITHDRAWAL(VIEW)
2014-03-22 15:52:25,166 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 
2014-03-22 15:52:25,167 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ [Table Count]
2014-03-22 15:52:25,167 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - $ 16
2014-03-22 15:52:25,167 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - $ = = = = = = = = = =/
2014-03-22 15:52:25,168 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - 
2014-03-22 15:52:25,172 [main] INFO  (DfSchemaXmlSerializer#processSequence():795) - ...Getting sequences
2014-03-22 15:52:25,175 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():52) - ...Loading sequence informations
2014-03-22 15:52:25,177 [main] INFO  (DfSequenceExtractorBase#selectStringList():75) - select * from INFORMATION_SCHEMA.SEQUENCES where SEQUENCE_SCHEMA in ('PUBLIC')
2014-03-22 15:52:25,179 [main] INFO  (DfSequenceExtractorH2#doGetSequenceMap():84) - 
[SEQUENCE]
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_A0A47022_E726_42F1_9B6F_77E25058B7AD = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_A0A47022_E726_42F1_9B6F_77E25058B7AD:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_ABF62655_B7BE_4976_9EF2_01B817193CF5 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_ABF62655_B7BE_4976_9EF2_01B817193CF5:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_60B9C676_911C_4A4A_85A8_4AC7075C7A0F = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_60B9C676_911C_4A4A_85A8_4AC7075C7A0F:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_F712C6BD_075D_4AF5_A059_D02FA7E2CFE9 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_F712C6BD_075D_4AF5_A059_D02FA7E2CFE9:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_0475D05E_AA7C_4817_B9F3_E11A2ABBF865 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_0475D05E_AA7C_4817_B9F3_E11A2ABBF865:{null to null, increment 1}
 EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_C230428B_9665_4C19_A8AA_78BC63825190 = EXAMPLEDB.PUBLIC.SYSTEM_SEQUENCE_C230428B_9665_4C19_A8AA_78BC63825190:{null to null, increment 1}
2014-03-22 15:52:25,180 [main] INFO  (DfSchemaXmlSerializer#processSequence():800) - ...Processing sequences: 6
2014-03-22 15:52:25,193 [main] INFO  (DfSchemaXmlSerializer#serialize():301) - ...Serializing XML:
2014-03-22 15:52:25,193 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   filePath = ./schema/project-schema-exampledb.xml
2014-03-22 15:52:25,193 [main] INFO  (DfSchemaXmlSerializer#serialize():303) -   encoding = UTF-8
2014-03-22 15:52:25,222 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1481) - ...Loading next schema (schema diff process)
2014-03-22 15:52:25,224 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:52:25,281 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1496) -  -> same as previous (schema diff)
2014-03-22 15:52:25,281 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2014-03-22 15:52:25,296 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s752ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2 (H2 1.3.173 (2013-07-28))
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2014-03-22 15:52:25,900 [main] INFO  (TorqueDocumentationTask#begin():173) - +------------------------------------------+
2014-03-22 15:52:25,901 [main] INFO  (TorqueDocumentationTask#begin():174) - |                                          |
2014-03-22 15:52:25,902 [main] INFO  (TorqueDocumentationTask#begin():175) - |                   Doc                    |
2014-03-22 15:52:25,902 [main] INFO  (TorqueDocumentationTask#begin():183) - |                                          |
2014-03-22 15:52:25,902 [main] INFO  (TorqueDocumentationTask#begin():184) - +------------------------------------------+
2014-03-22 15:52:25,930 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:25,930 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:25,938 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:25,941 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:25,943 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():241) - 
2014-03-22 15:52:25,944 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():242) - * * * * * * * * * * *
2014-03-22 15:52:25,944 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():243) - *                   *
2014-03-22 15:52:25,944 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():244) - *    Schema HTML    *
2014-03-22 15:52:25,944 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():245) - *                   *
2014-03-22 15:52:25,945 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - * * * * * * * * * * *
2014-03-22 15:52:26,021 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:52:26,065 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("doc/ControlDocument.vm", c);
2014-03-22 15:52:26,094 [main] INFO  (Database#doEnableDocumentOutputDirectory():1185) - ...Setting up documentOutputDirectory: ./output/doc
2014-03-22 15:52:26,097 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:52:26,097 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:52:26,098 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:52:26,099 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:52:26,099 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:52:26,100 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:52:26,103 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:52:26,110 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:52:26,114 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:52:26,115 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:52:26,115 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:52:26,115 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:26,116 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:52:26,116 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:52:26,119 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:26,120 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:52:26,120 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:52:26,120 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:52:26,121 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:26,121 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:52:26,121 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:52:26,122 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:52:26,125 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:26,411 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:52:26,414 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:52:26,415 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:52:26,416 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:52:26,417 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:52:26,418 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:52:26,730 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():150) - ...Loading schema history
2014-03-22 15:52:26,756 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():154) -  -> found history: count=5
2014-03-22 15:52:26,780 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 15:52:26,808 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s905ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example
_/_/_/_/_/_/_/_/_/_/ {Doc}
2014-03-22 15:52:28,196 [main] INFO  (TorqueDataModelTask#begin():104) - +------------------------------------------+
2014-03-22 15:52:28,198 [main] INFO  (TorqueDataModelTask#begin():105) - |                                          |
2014-03-22 15:52:28,198 [main] INFO  (TorqueDataModelTask#begin():106) - |                 Generate                 |
2014-03-22 15:52:28,198 [main] INFO  (TorqueDataModelTask#begin():107) - |                                          |
2014-03-22 15:52:28,198 [main] INFO  (TorqueDataModelTask#begin():108) - +------------------------------------------+
2014-03-22 15:52:28,239 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:28,240 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:28,240 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:28,240 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:28,248 [main] INFO  (TorqueDataModelTask#setupControlTemplate():153) - 
2014-03-22 15:52:28,248 [main] INFO  (TorqueDataModelTask#setupControlTemplate():154) - * * * * * * * * *
2014-03-22 15:52:28,248 [main] INFO  (TorqueDataModelTask#setupControlTemplate():155) - * Process Java  *
2014-03-22 15:52:28,249 [main] INFO  (TorqueDataModelTask#setupControlTemplate():156) - * * * * * * * * *
2014-03-22 15:52:28,249 [main] INFO  (TorqueDataModelTask#setupControlTemplate():158) - ...Using Java control: om/ControlGenerateJava.vm
2014-03-22 15:52:28,303 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:52:28,337 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlGenerateJava.vm", c);
2014-03-22 15:52:28,446 [main] INFO  (Database#doEnableGenerateOutputDirectory():1153) - ...Setting up generateOutputDirectory: ../app
2014-03-22 15:52:28,449 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2014-03-22 15:52:28,449 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2014-03-22 15:52:28,450 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2014-03-22 15:52:28,451 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2014-03-22 15:52:28,451 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2014-03-22 15:52:28,453 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2014-03-22 15:52:28,457 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2014-03-22 15:52:28,457 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2014-03-22 15:52:28,459 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_SUMMARY_PRODUCT_PRODUCT_STATUS
2014-03-22 15:52:28,460 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key SUMMARY_PRODUCT.[PRODUCT_STATUS_CODE] to PRODUCT_STATUS.[PRODUCT_STATUS_CODE]
2014-03-22 15:52:28,460 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_PURCHASE_SUMMARY_PRODUCT
2014-03-22 15:52:28,461 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:28,461 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():278) -   Add foreign key PURCHASE.[PRODUCT_ID] to SUMMARY_PRODUCT.[PRODUCT_ID]
2014-03-22 15:52:28,462 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2014-03-22 15:52:28,470 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:28,470 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2014-03-22 15:52:28,471 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2014-03-22 15:52:28,471 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2014-03-22 15:52:28,471 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():174) -   *Referrer setting was not allowed in this case
2014-03-22 15:52:28,471 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():273) -   Add foreign key MEMBER.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2014-03-22 15:52:28,472 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():275) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2014-03-22 15:52:28,472 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2014-03-22 15:52:28,476 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:28,767 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:52:28,770 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:52:28,771 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:52:28,772 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:52:28,773 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:52:28,775 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:52:28,797 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - /=============================
2014-03-22 15:52:28,798 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():60) - ...Initializing include query.
2014-03-22 15:52:28,798 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - String
2014-03-22 15:52:28,798 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Number
2014-03-22 15:52:28,799 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():83) - Date
2014-03-22 15:52:28,799 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotEqual -> []
2014-03-22 15:52:28,799 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   InScope -> []
2014-03-22 15:52:28,799 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():88) -   NotInScope -> []
2014-03-22 15:52:28,800 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():62) - ========/
2014-03-22 15:52:28,811 [main] INFO  (Database#info():2625) - public void parseAllCommon() {
2014-03-22 15:52:28,812 [main] INFO  (Database#info():2625) -     parse('CDef');
2014-03-22 15:52:28,831 [main] INFO  (Database#info():2625) -     parse('DBCurrent');
2014-03-22 15:52:28,834 [main] INFO  (Database#info():2625) -     parse('DBFluteConfig');
2014-03-22 15:52:28,852 [main] INFO  (Database#info():2625) -     parse('DBFluteInitializer');
2014-03-22 15:52:28,855 [main] INFO  (Database#info():2625) -     parse('DBMetaInstanceHandler');
2014-03-22 15:52:28,867 [main] INFO  (Database#info():2625) -     parse('EntityDefinedCommonColumn');
2014-03-22 15:52:28,875 [main] INFO  (Database#info():2625) -     parse('ImplementedBehaviorSelector');
2014-03-22 15:52:28,879 [main] INFO  (Database#info():2625) -     parse('ImplementedCommonColumnAutoSetupper');
2014-03-22 15:52:28,888 [main] INFO  (Database#info():2625) -     parse('ImplementedInvokerAssistant');
2014-03-22 15:52:28,892 [main] INFO  (Database#info():2625) -     parse('ImplementedSqlClauseCreator');
2014-03-22 15:52:28,894 [main] INFO  (Database#info():2625) - }
2014-03-22 15:52:28,894 [main] INFO  (Database#info():2625) - public void parseContainerConfig() {
2014-03-22 15:52:28,895 [main] INFO  (Database#info():2625) -     parse('../conf/dbflute.dicon')
2014-03-22 15:52:28,901 [main] INFO  (Database#info():2625) - }
2014-03-22 15:52:28,905 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldTableClass() {
2014-03-22 15:52:28,921 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:52:28,921 [main] INFO  (Database#info():2625) - public void parseTableClass() {
2014-03-22 15:52:28,922 [main] INFO  (Database#info():2625) -     parse('MEMBER');
2014-03-22 15:52:29,374 [main] INFO  (Database#info():2625) -     parse('MEMBER_ADDRESS');
2014-03-22 15:52:29,617 [main] INFO  (Database#info():2625) -     parse('MEMBER_LOGIN');
2014-03-22 15:52:29,770 [main] INFO  (Database#info():2625) -     parse('MEMBER_SECURITY');
2014-03-22 15:52:29,947 [main] INFO  (Database#info():2625) -     parse('MEMBER_SERVICE');
2014-03-22 15:52:30,126 [main] INFO  (Database#info():2625) -     parse('MEMBER_STATUS');
2014-03-22 15:52:30,274 [main] INFO  (Database#info():2625) -     parse('MEMBER_WITHDRAWAL');
2014-03-22 15:52:30,400 [main] INFO  (Database#info():2625) -     parse('PRODUCT');
2014-03-22 15:52:30,585 [main] INFO  (Database#info():2625) -     parse('PRODUCT_CATEGORY');
2014-03-22 15:52:30,728 [main] INFO  (Database#info():2625) -     parse('PRODUCT_STATUS');
2014-03-22 15:52:30,887 [main] INFO  (Database#info():2625) -     parse('PURCHASE');
2014-03-22 15:52:31,013 [main] INFO  (Database#info():2625) -     parse('REGION');
2014-03-22 15:52:31,137 [main] INFO  (Database#info():2625) -     parse('SERVICE_RANK');
2014-03-22 15:52:31,252 [main] INFO  (Database#info():2625) -     parse('SUMMARY_PRODUCT');
2014-03-22 15:52:31,326 [main] INFO  (Database#info():2625) -     parse('SUMMARY_WITHDRAWAL');
2014-03-22 15:52:31,411 [main] INFO  (Database#info():2625) -     parse('WITHDRAWAL_REASON');
2014-03-22 15:52:31,490 [main] INFO  (Database#info():2625) - }
2014-03-22 15:52:31,491 [main] INFO  (Database#info():2625) -  
2014-03-22 15:52:31,521 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 15:52:31,530 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s328ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example
_/_/_/_/_/_/_/_/_/_/ {Generate}
2014-03-22 15:52:32,302 [main] INFO  (DfOutsideSqlTestTask#begin():72) - +------------------------------------------+
2014-03-22 15:52:32,305 [main] INFO  (DfOutsideSqlTestTask#begin():73) - |                                          |
2014-03-22 15:52:32,306 [main] INFO  (DfOutsideSqlTestTask#begin():74) - |              OutsideSqlTest              |
2014-03-22 15:52:32,306 [main] INFO  (DfOutsideSqlTestTask#begin():75) - |                                          |
2014-03-22 15:52:32,307 [main] INFO  (DfOutsideSqlTestTask#begin():76) - +------------------------------------------+
2014-03-22 15:52:32,363 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:32,364 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:32,364 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:32,365 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:32,407 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:52:32,414 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s105ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2014-03-22 15:52:33,304 [main] INFO  (DfSql2EntityTask#begin():100) - +------------------------------------------+
2014-03-22 15:52:33,308 [main] INFO  (DfSql2EntityTask#begin():101) - |                                          |
2014-03-22 15:52:33,308 [main] INFO  (DfSql2EntityTask#begin():102) - |                Sql2Entity                |
2014-03-22 15:52:33,309 [main] INFO  (DfSql2EntityTask#begin():103) - |                                          |
2014-03-22 15:52:33,309 [main] INFO  (DfSql2EntityTask#begin():104) - +------------------------------------------+
2014-03-22 15:52:33,348 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2014-03-22 15:52:33,348 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = org.h2.Driver
2014-03-22 15:52:33,348 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
2014-03-22 15:52:33,349 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = sa
2014-03-22 15:52:33,381 [main] INFO  (DfSql2EntityTask#setupControlTemplate():172) - 
2014-03-22 15:52:33,399 [main] INFO  (DfSql2EntityTask#setupControlTemplate():173) - * * * * * * * * *
2014-03-22 15:52:33,399 [main] INFO  (DfSql2EntityTask#setupControlTemplate():174) - * Process Java  *
2014-03-22 15:52:33,400 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - * * * * * * * * *
2014-03-22 15:52:33,401 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - ...Using Java control: om/ControlSql2EntityJava.vm
2014-03-22 15:52:33,412 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2014-03-22 15:52:33,526 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2014-03-22 15:52:33,700 [main] INFO  (DfSql2EntityTask#initControlContext():329) - 
2014-03-22 15:52:33,700 [main] INFO  (DfSql2EntityTask#initControlContext():330) - ...Preparing generation of customize-entities and parameter-beans
2014-03-22 15:52:33,700 [main] INFO  (DfSql2EntityTask#initControlContext():331) - * * * * * * * * * *
2014-03-22 15:52:33,701 [main] INFO  (DfSql2EntityTask#initControlContext():332) - * CustomizeEntity *
2014-03-22 15:52:33,701 [main] INFO  (DfSql2EntityTask#initControlContext():333) - * * * * * * * * * *
2014-03-22 15:52:33,701 [main] INFO  (DfSql2EntityTask#showParameterBean():899) - * * * * * * * * *
2014-03-22 15:52:33,702 [main] INFO  (DfSql2EntityTask#showParameterBean():900) - * ParameterBean *
2014-03-22 15:52:33,702 [main] INFO  (DfSql2EntityTask#showParameterBean():901) - * * * * * * * * *
2014-03-22 15:52:33,707 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlSql2EntityJava.vm", c);
2014-03-22 15:52:33,819 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():946) - ...Creating connection to main schema: {EXAMPLEDB.PUBLIC as main}
2014-03-22 15:52:34,261 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2014-03-22 15:52:34,266 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2014-03-22 15:52:34,267 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2014-03-22 15:52:34,268 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2014-03-22 15:52:34,270 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2014-03-22 15:52:34,272 [main] INFO  (DfClassificationProperties#setupTableClassification():545) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2014-03-22 15:52:34,293 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1169) - ...Setting up sql2EntityOutputDirectory: ../app
2014-03-22 15:52:34,296 [main] INFO  (DfOldClassHandler#info():886) - public void deleteOldCustomizeClass() {
2014-03-22 15:52:34,300 [main] INFO  (DfOldClassHandler#info():886) - }
2014-03-22 15:52:34,301 [main] INFO  (Database#info():2625) - public void parseCustomizeEntity() {
2014-03-22 15:52:34,301 [main] INFO  (Database#info():2625) - }
2014-03-22 15:52:34,307 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():321) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2014-03-22 15:52:34,309 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 15:52:34,314 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s007ms

  DBFLUTE_CLIENT: {exampledb}
    database  = h2
    language  = java
    container = seasar
    package   = com.example.dbflute.sastruts.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = org.h2.Driver
    url    = jdbc:h2:file:../src/main/resources/exampledb/exampledb
    schema = {EXAMPLEDB.PUBLIC as main}
    user   = sa
    props  = {user=sa, password=, rewriteBatchedStatements=true}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-play-java-example
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2014-03-22 16:51:08,388 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 16:51:08,458 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s097ms
2014-03-22 16:51:33,433 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 16:51:33,459 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s055ms
2014-03-22 16:51:58,441 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 16:51:58,466 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s052ms
2014-03-22 16:52:46,278 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-play-java-example]
2014-03-22 16:52:46,310 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s059ms
